#+TITLE: Emacs Base Configuration
#+STARTUP: fold
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

This is an ongoing evolution of my original Emacs configuration files, inspired by a bunch of resources I've found online.

* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#startup-performance][Startup Performance]]
- [[#native-compilation][Native Compilation]]
- [[#package-management][Package Management]]
  - [[#use-package][use-package]]
  - [[#straightel][straight.el]]
- [[#path][PATH]]
- [[#keep-emacsd-clean][Keep .emacs.d Clean]]
- [[#default-coding-system][Default Coding System]]
- [[#keyboard-bindings][Keyboard Bindings]]
  - [[#esc-cancels-all][ESC Cancels All]]
  - [[#rebind-c-u][Rebind C-u]]
  - [[#lets-be-evil][Let's Be Evil]]
  - [[#keybinding-panel-which-key][Keybinding Panel (which-key)]]
  - [[#simplify-leader-bindings-generalel][Simplify Leader Bindings (general.el)]]
- [[#general-configuration][General Configuration]]
  - [[#user-interface][User Interface]]
  - [[#theme][Theme]]
  - [[#font][Font]]
    - [[#set-the-font][Set the font]]
    - [[#enable-proper-unicode-glyph-support][Enable proper Unicode glyph support]]
    - [[#emojis-in-buffers][Emojis in buffers]]
  - [[#mode-line][Mode Line]]
    - [[#enable-mode-diminishing][Enable Mode Diminishing]]
    - [[#doom-modeline][Doom Modeline]]
  - [[#workspaces][Workspaces]]
  - [[#auto-saving-changed-files][Auto-Saving Changed Files]]
  - [[#auto-reverting-changed-files][Auto-Reverting Changed Files]]
  - [[#ui-toggles][UI Toggles]]
  - [[#highlight-matching-braces][Highlight Matching Braces]]
  - [[#helpful][Helpful]]
- [[#editing-configuration][Editing Configuration]]
  - [[#agressive-indent][Agressive indent]]
  - [[#tab-widths][Tab Widths]]
  - [[#use-spaces-instead-of-tabs-for-indentation][Use spaces instead of tabs for indentation]]
  - [[#automatically-clean-whitespace][Automatically clean whitespace]]
  - [[#use-parinfer-for-lispy-languages][Use Parinfer for Lispy languages]]
  - [[#origamiel-for-folding][Origami.el for Folding]]
- [[#configuration-files][Configuration Files]]
  - [[#helpers][Helpers]]
  - [[#bindings][Bindings]]
- [[#stateful-keymaps-with-hydra][Stateful Keymaps with Hydra]]
- [[#completion-system][Completion System]]
  - [[#preserve-minibuffer-history-with-savehist-mode][Preserve Minibuffer History with savehist-mode]]
  - [[#completions-with-vertico][Completions with Vertico]]
  - [[#completions-in-regions-with-corfu][Completions in Regions with Corfu]]
  - [[#improved-candidate-filtering-with-orderless][Improved Candidate Filtering with Orderless]]
  - [[#consult-commands][Consult Commands]]
  - [[#switching-directories-with-consult-dir][Switching Directories with consult-dir]]
  - [[#completion-annotations-with-marginalia][Completion Annotations with Marginalia]]
  - [[#completion-actions-with-embark][Completion Actions with Embark]]
  - [[#company-mode][company-mode]]
- [[#buffer-management-with-bufler][Buffer Management with Bufler]]
- [[#window-management][Window Management]]
  - [[#frame-scaling--zooming][Frame Scaling / Zooming]]
  - [[#window-selection-with-ace-window][Window Selection with ace-window]]
  - [[#window-history-with-winner-mode][Window History with winner-mode]]
  - [[#set-margins-for-modes][Set Margins for Modes]]
  - [[#control-buffer-placement][Control Buffer Placement]]
  - [[#taming-popups-with-popperel][Taming Popups with Popper.el]]
- [[#file-browsing][File Browsing]]
  - [[#dired][Dired]]
- [[#org-mode][Org Mode]]
  - [[#fonts][Fonts]]
  - [[#block-templates][Block templates]]
  - [[#org-configuration][org configuration]]
  - [[#ob-ipython][ob-ipython]]
  - [[#ox-ipynb][ox-ipynb]]
  - [[#bullets][Bullets]]
  - [[#bindings][Bindings]]
  - [[#a-few-useful-functions][a few useful functions]]
    - [[#searching][Searching]]
  - [[#update-table-of-contents-on-save][Update Table of Contents on Save]]
  - [[#calendar-sync][Calendar Sync]]
  - [[#reminders][Reminders]]
  - [[#presentations][Presentations]]
    - [[#org-present][org-present]]
    - [[#org-tree-slide][org-tree-slide]]
  - [[#org-roam][Org Roam]]
  - [[#deft][Deft]]
  - [[#auto-show-markup-symbols][Auto-show Markup Symbols]]
  - [[#org-cv][org-cv]]
- [[#development][Development]]
  - [[#git][Git]]
    - [[#magit][Magit]]
    - [[#magit-todos][magit-todos]]
    - [[#git-link][git-link]]
    - [[#git-gutter][Git Gutter]]
  - [[#projectile][Projectile]]
  - [[#languages][Languages]]
    - [[#language-server-support][Language Server Support]]
    - [[#eglot][Eglot]]
    - [[#debug-adapter-support][Debug Adapter Support]]
    - [[#typescript-and-javascript][TypeScript and JavaScript]]
    - [[#cc][C/C++]]
    - [[#cmake][Cmake]]
    - [[#python][python]]
      - [[#python-mode][python mode]]
      - [[#productivity][Productivity]]
      - [[#virtual-envs][virtual envs]]
      - [[#ein][Ein]]
    - [[#emacs-lisp][Emacs Lisp]]
    - [[#html][HTML]]
  - [[#compilation][Compilation]]
  - [[#productivity][Productivity]]
    - [[#agressive-indent][agressive indent]]
    - [[#syntax-checking-with-flycheck][Syntax checking with Flycheck]]
    - [[#tree-sitter][tree-sitter]]
    - [[#treemacs][treemacs]]
    - [[#yaml][YAML]]
    - [[#snippets][Snippets]]
    - [[#smart-parens][Smart Parens]]
    - [[#rainbow-delimiters][Rainbow Delimiters]]
    - [[#rainbow-mode][Rainbow Mode]]
    - [[#writing][writing]]
- [[#applications][Applications]]
  - [[#launching-apps][Launching apps]]
  - [[#mail][Mail]]
    - [[#mu4e][mu4e]]
    - [[#enhancing-emails-with-org-mode][Enhancing emails with Org Mode]]
      - [[#html-mail][HTML mail]]
    - [[#org-msg][org-msg]]
  - [[#web][Web]]
  - [[#eshell][eshell]]
    - [[#configuration][Configuration]]
    - [[#shell-commands][Shell Commands]]
    - [[#visual-commands][Visual Commands]]
    - [[#better-colors][Better Colors]]
    - [[#fish-completion][Fish Completion]]
    - [[#command-highlighting][Command Highlighting]]
    - [[#history-autocompletion][History Autocompletion]]
    - [[#toggling-eshell][Toggling Eshell]]
  - [[#vterm][vterm]]
  - [[#eat][eat]]
  - [[#quarto][quarto]]
  - [[#leetcode][Leetcode]]
  - [[#chatgpt][chatgpt]]
  - [[#copilot][copilot]]
- [[#move-between-buffers][Move between buffers]]
- [[#runtime-performance][Runtime Performance]]
- [[#auto-tangle][Auto tangle]]
:END:
* Startup Performance

Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.

Also, turn on =lexical-binding= for the init file!

#+begin_src emacs-lisp
  ;;  -*-lexical-binding: t-*-
  (setq debug-on-error 1)

  ;; The default is 800 kilobytes.  Measured in bytes.
  (setq gc-cons-threshold (* 50 1000 1000))

  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

#+end_src

#+RESULTS:
| (lambda nil (message *** Emacs loaded in %s with %d garbage collections. (format %.2f seconds (float-time (time-subtract after-init-time before-init-time))) gcs-done)) | efs/display-startup-time |

* Native Compilation

I've started experimenting with the =native-comp= branch of Emacs for increased performance.  Here are some settings to tweak the behavior slightly:

#+begin_src emacs-lisp :tangle no

  ;; Silence compiler warnings as they can be pretty disruptive
  (setq native-comp-async-report-warnings-errors nil)

  ;; Set the right directory to store the native comp cache
  (add-to-list 'native-comp-eln-load-path (expand-file-name "eln-cache/" user-emacs-directory))

#+end_src

* Package Management
** use-package
Set up ELPA, MELPA, and Org package repositories and load =use-package= to manage package configuration.

*NOTE:* I'm keeping this section in but disabling tangling for now because I'm trying out =straight.el= as an alternative.

#+begin_src emacs-lisp :tangle no

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  (require 'use-package)
  (setq use-package-always-ensure t)
  (setq use-package-verbose t)

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    ;; :config
    ;; (auto-package-update-maybe)
    ;; (auto-package-update-at-time "09:00")
    )

#+end_src

#+RESULTS:
: use-package
** straight.el

#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ;; Use straight.el for use-package expressions
  (straight-use-package 'use-package)
  ;; equivalent of use-package-always-ensure
  (setq straight-use-package-by-default t)

#+end_src

* PATH
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :init
    ;; (setq exec-path-from-shell-arguments nil)
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-copy-envs '("PATH" "MANPATH" "CONDA_PATH"))))

#+end_src

#+RESULTS:

* Keep .emacs.d Clean

I don't want a bunch of transient files showing up as untracked in the Git repo so I move them all to another location.

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (use-package no-littering)

  ;; no-littering doesn't set this by default so we must place
  ;; auto save files in the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

  ;; Keep customization settings in a temporary file (thanks Ambrevar!)
  (setq custom-file
        (if (boundp 'server-socket-dir)
            (expand-file-name "custom.el" server-socket-dir)
          (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
  (load custom-file t)

#+end_src

#+RESULTS:
: t

* Default Coding System

Avoid constant errors on Windows about the coding system by setting the default to UTF-8.

#+begin_src emacs-lisp

  (set-default-coding-systems 'utf-8)
  ;; (setq exec-path (append exec-path '("/usr/include/c++/11")))

#+end_src

#+RESULTS:
: (utf-8-unix . utf-8-unix)

* Keyboard Bindings
** ESC Cancels All

#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

#+RESULTS:
: keyboard-escape-quit

** Rebind C-u

Since I let =evil-mode= take over =C-u= for buffer scrolling, I need to re-bind the =universal-argument= command to another key sequence.  I'm choosing =C-M-u= for this purpose.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-M-u") 'universal-argument)
#+end_src

#+RESULTS:
: previous-buffer

** Let's Be Evil

Some tips can be found here:

- https://github.com/noctuid/evil-guide
- https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html

#+begin_src emacs-lisp

    (use-package undo-tree
      :init
      (setq undo-tree-auto-save-history t)
      (global-undo-tree-mode 1))

    (use-package evil
      :init
      (setq evil-want-integration t)
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll nil)
      (setq evil-want-C-d-scroll nil)
      (setq evil-want-C-i-jump nil)
      (setq evil-respect-visual-line-mode t)
      (setq evil-undo-system 'undo-tree)
      :config
      (evil-mode 1)
      (require 'subr-x)
      ;; Set Emacs state modes
      (dolist (mode '(custom-mode
                      eshell-mode
                      git-rebase-mode
                      term-mode))
        (add-to-list 'evil-emacs-state-modes mode))

      (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

      ;; Basic movement
      (define-key evil-normal-state-map (kbd "C-f") 'evil-forward-char)
      (define-key evil-normal-state-map (kbd "C-b") 'evil-backward-char)
      (define-key evil-normal-state-map (kbd "C-n") 'evil-next-line)
      (define-key evil-normal-state-map (kbd "C-p") 'evil-previous-line)

      ;; Word movement
      (define-key evil-normal-state-map (kbd "M-f") 'evil-forward-word-end)
      (define-key evil-normal-state-map (kbd "M-b") 'evil-backward-word-begin)
      (define-key evil-insert-state-map (kbd "M-f") 'evil-forward-word-end)
      (define-key evil-insert-state-map (kbd "M-b") 'evil-backward-word-begin)

      ;; python jump to prev/next def
      (defun my-python-nav-forward-defun ()
        (interactive)
        (let ((current-pos (point)))
          (python-nav-forward-defun)
          (when (equal (point) current-pos)
            (message "Reached the last def in the file"))))

      (defun my-python-nav-backward-defun ()
        (interactive)
        (let ((current-pos (point)))
          (python-nav-backward-defun)
          (when (equal (point) current-pos)
            (message "Reached the first def in the file"))))

      ;; (evil-define-key 'normal python-mode-map (kbd "C-f n") 'my-python-nav-forward-defun)
      ;; (evil-define-key 'normal python-mode-map (kbd "C-f p") 'my-python-nav-backward-defun)
      ;; (evil-define-key 'emacs python-mode-map (kbd "C-f n") 'my-python-nav-forward-defun)
      ;; (evil-define-key 'emacs python-mode-map (kbd "C-f p") 'my-python-nav-backward-defun)

      ;; Line movement
      (define-key evil-normal-state-map (kbd "C-a") 'move-beginning-of-line)
      (define-key evil-normal-state-map (kbd "C-e") 'move-end-of-line)
      (define-key evil-insert-state-map (kbd "C-e") 'evil-end-of-line)
      (define-key evil-insert-state-map (kbd "C-a") 'evil-beginning-of-line)

      (define-key evil-normal-state-map (kbd "M-$") 'evil-scroll-line-down)
      (define-key evil-normal-state-map (kbd "C-$") 'evil-scroll-line-up)

      (define-key evil-normal-state-map (kbd "M-n") 'next-buffer)
      (define-key evil-normal-state-map (kbd "M-p") 'previous-buffer)

      (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-define-key 'normal org-mode-map (kbd "M-n") 'org-babel-next-src-block)

      (evil-define-key 'normal org-mode-map (kbd "M-p") 'org-babel-previous-src-block)
      (evil-define-key 'emacs org-mode-map (kbd "M-n") 'org-babel-next-src-block)
      (evil-define-key 'emacs org-mode-map (kbd "M-p") 'org-babel-previous-src-block)

      ;; (evil-global-set-key 'normal (kbd "M-n") 'next-buffer)
      ;; (evil-global-set-key 'normal (kbd "M-p") 'previous-buffer)

      (defun dw/dont-arrow-me-bro ()
        (interactive)
        (message "Arrow keys are bad, you know?"))

      ;; Disable arrow keys in normal and vsual modes
      ;; (define-key evil-normal-state-map (kbd "<left>") 'dw/dont-arrow-me-bro)
      ;; (define-key evil-normal-state-map (kbd "<right>") 'dw/dont-arrow-me-bro)
      ;; (define-key evil-normal-state-map (kbd "<down>") 'dw/dont-arrow-me-bro)
      ;; (define-key evil-normal-state-map (kbd "<up>") 'dw/dont-arrow-me-bro)
      ;; (evil-global-set-key 'motion (kbd "<left>") 'dw/dont-arrow-me-bro)
      ;; (evil-global-set-key 'motion (kbd "<right>") 'dw/dont-arrow-me-bro)
      ;; (evil-global-set-key 'motion (kbd "<down>") 'dw/dont-arrow-me-bro)
      ;; (evil-global-set-key 'motion (kbd "<up>") 'dw/dont-arrow-me-bro)

      (evil-set-initial-state 'messages-buffer-mode 'normal)
      (evil-set-initial-state 'dashboard-mode 'normal))

    (use-package evil-collection
      :after evil
      :init
      (setq evil-collection-company-use-tng nil)
      :config
      (evil-collection-init))

#+end_src

#+RESULTS:
: t

** Keybinding Panel (which-key)
[[https://github.com/justbur/emacs-which-key][which-key]] is great for getting an overview of what keybindings are available
based on the prefix keys you entered.  Learned about this one from Spacemacs.

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (setq which-key-popup-type 'frame)
    (which-key-mode)
    (which-key-setup-side-window-bottom))


#+end_src

#+RESULTS:
: t
** Simplify Leader Bindings (general.el)

[[https://github.com/noctuid/general.el][general.el]] is a fantastic library for defining prefixed keybindings, especially
in conjunction with Evil modes.

#+begin_src emacs-lisp
  (use-package general
    :after evil
    :config
    (general-evil-setup t)
    (general-create-definer dw/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (dw/leader-key-def
      "t" '(:ignore t :which-key "toggles")))

#+end_src

#+RESULTS:
: t

* General Configuration
** User Interface
Clean up Emacs' user interface, make it more minimal.

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)      ; Give some breathing room
  (menu-bar-mode -1)            ; Disable the menu bar
  (setq visible-bell nil)  ; Disable visible bell

#+end_src

#+RESULTS:

Improve scrolling.

#+begin_src emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time
  ;; (setq use-dialog-box nil) ;; Disable dialog boxes since they weren't working in Mac OSX

#+end_src

#+RESULTS:
: 1

Set frame transparency and maximize windows by default.

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

#+RESULTS:
: ((fullscreen . maximized) (alpha 90 . 90) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))

Enable line numbers and customize their format.

#+begin_src emacs-lisp

  (column-number-mode)

  ;; Enable line numbers for some modes
  (dolist (mode '(text-mode-hook
                  prog-mode-hook
                  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))

  ;; Override some modes which derive from the above
  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

#+RESULTS:

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)

#+end_src

#+RESULTS:

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)

#+end_src

#+RESULTS:
: t

Don't warn when advice is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)

#+end_src

#+RESULTS:
: accept
#+begin_src emacs-lisp
  (use-package git-gutter
    :hook (prog-mode . git-gutter-mode)
    :config
    (setq git-gutter:update-interval 0.02))

  (use-package git-gutter-fringe
    :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))

#+end_src

#+RESULTS:
: t

** Theme

These days I bounce around between themes included with [[https://github.com/hlissner/emacs-doom-themes][DOOM Themes]] since they're well-designed and integrate with a lot of Emacs packages.

A nice gallery of Emacs themes can be found at https://emacsthemes.com/.

Alternate themes:

- =doom-snazzy=
- =doom-vibrant=

#+begin_src emacs-lisp

  ;;  (use-package spacegray-theme :defer t)
  (use-package doom-themes :defer t)
  (load-theme 'doom-city-lights t)
  (doom-themes-visual-bell-config)

#+end_src

#+RESULTS:
: t

** Font
*** Set the font
Different platforms need different default font sizes, and [[https://mozilla.github.io/Fira/][Fira Mono]] is currently my favorite face.
#+begin_src emacs-lisp
  (defvar efs/default-font-size 160)
  (defvar efs/default-variable-font-size 160)

  (set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

  ;;Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

  ;;Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)

#+end_src
#+RESULTS:

*** Enable proper Unicode glyph support

#+begin_src emacs-lisp

  (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                       (lambda (i) (string-equal (car i) block-name))
                       unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :disabled
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
     (lambda (block-name)
       (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
     '("Dingbats"
       "Emoticons"
       "Miscellaneous Symbols and Pictographs"
       "Transport and Map Symbols"))
    (unicode-fonts-setup))

#+end_src

#+RESULTS:

*** Emojis in buffers

#+begin_src emacs-lisp

  (use-package emojify
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)

#+end_src

#+RESULTS:
| emojify-mode |

** Mode Line
*** Enable Mode Diminishing

The [[https://github.com/myrjola/diminish.el][diminish]] package hides pesky minor modes from the modelines.

#+begin_src emacs-lisp

  (use-package diminish)

#+end_src

#+RESULTS:

*** Doom Modeline
#+begin_src emacs-lisp

  ;; You must run (all-the-icons-install-fonts) one time after
  ;; (all-the-icons-install-fonts)
  ;; installing this package!

  (use-package minions
    :hook (doom-modeline-mode . minions-mode))

  ;; ;; Better Modeline
  ;; (use-package all-the-icons)
  ;; (nerd-icons-install-fonts)

  (use-package nerd-icons)

  (use-package
    doom-modeline
    :init
    (setq doom-modeline-support-imenu t)
    (setq doom-modeline-env-enable-python t)
    (setq doom-modeline-env-enable-go nil)
    (setq doom-modeline-buffer-encoding 'nondefault)
    (setq doom-modeline-hud t)
    (setq doom-modeline-persp-icon nil)
    (setq doom-modeline-persp-name nil)
    :config
    (setq doom-modeline-project-detection 'auto)
    (setq doom-modeline-buffer-file-name-style 'auto)
    (setq doom-modeline-icon nil)
    (setq doom-modeline-major-mode-icon t)
    (setq doom-modeline-buffer-state-icon nil)
    (setq doom-modeline-minor-modes nil)
    (setq doom-modeline-continuous-word-count-modes '(markdown-mode gfm-mode org-mode))
    (setq doom-modeline-time t)
    (setq doom-modeline-env-version t)
    ;; (progn
    ;;   (require 'doom-modeline-segments)
    ;;   ;; https://martinralbrecht.wordpress.com/2020/08/23/conda-jupyter-and-emacs/
    ;;   (doom-modeline-def-segment
    ;;     conda-env
    ;;     "The current conda environment.  Works with `conda'."
    ;;     (when (bound-and-true-p conda-env-current-name)
    ;;       (propertize (format " |%s|" conda-env-current-name) 'face (if (doom-modeline--active)
    ;;                                                                     'mode-line
    ;;                                                                   'mode-line-inactive) 'help-echo
    ;;                                                                   (format "Conda environment: %s"
    ;;                                                                           conda-env-current-name)))))
    ;; (doom-modeline-def-modeline
    ;;   'main
    ;;   '(bar workspace-name window-number modals matches buffer-info remote-host buffer-position
    ;;         word-count parrot selection-info conda-env)
    ;;   '(objed-state misc-info persp-name battery grip irc mu4e gnus github debug lsp minor-modes
    ;;                 input-method indent-info buffer-encoding major-mode process vcs checker))

    (doom-modeline-mode 1))

#+end_src

#+RESULTS:
: t

** Workspaces
#+begin_src emacs-lisp

  (use-package perspective
    :demand t
    :bind (("C-M-k" . persp-switch)
           ("C-M-n" . persp-next)
           ("C-x k" . persp-kill-buffer*))
    :custom
    (persp-initial-frame-name "Main")
    (persp-mode-prefix-key (kbd "C-c M-p"))
    :config
    ;; Running `persp-mode' multiple times resets the perspective list...
    (unless (equal persp-mode t)
      (persp-mode)))

#+end_src

#+RESULTS:
: persp-kill-buffer*

** Auto-Saving Changed Files

#+begin_src emacs-lisp

  (use-package super-save
    :defer 1
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))

#+end_src

#+RESULTS:

** Auto-Reverting Changed Files

#+begin_src emacs-lisp

  ;; Revert Dired and other buffers
  (setq global-auto-revert-non-file-buffers t)

  ;; Revert buffers when the underlying file has changed
  (global-auto-revert-mode 1)

#+end_src

#+RESULTS:
: t

** UI Toggles
#+begin_src emacs-lisp
  (dw/leader-key-def
    "t"  '(:ignore t :which-key "toggles")
    "tw" 'whitespace-mode
    "tt" '(counsel-load-theme :which-key "choose theme"))
#+end_src
#+Results:

** Highlight Matching Braces
#+begin_src emacs-lisp
  (use-package paren
    :config
    (set-face-attribute 'show-paren-match-expression nil :background "#363e4a")
    (show-paren-mode 1))
#+end_src
#+RESULTS:
: t

** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (dw/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (dw/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+end_src

#+RESULTS:
: helpful-key

* Editing Configuration
** Agressive indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :commands (aggressive-indent-mode))
#+end_src

#+RESULTS:

** Tab Widths

Default to an indentation size of 2 spaces since it's the norm for pretty much every language I use.

#+begin_src emacs-lisp

  (setq-default tab-width 4)
  (setq-default evil-shift-width tab-width)

  (setq-default python-indent 4)
  (setq-default python-indent-offset 4)

#+end_src

#+RESULTS:
: 4

** Use spaces instead of tabs for indentation
#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src
#+RESULTS:

** Automatically clean whitespace

#+begin_src emacs-lisp
  (use-package ws-butler
    :hook ((text-mode . ws-butler-mode)
           (prog-mode . ws-butler-mode)
           (python-mode . ws-butler-mode)))
#+end_src

#+RESULTS:
| ws-butler-mode | rainbow-mode | python-black-on-save-mode-enable-dwim | tree-sitter-hl-mode | tree-sitter-mode | (closure (bootstrap-version t) nil (conda-env-activate-for-buffer)) | eglot-ensure | evil-collection-python-set-evil-shift-width | doom-modeline-env-setup-python |

** Use Parinfer for Lispy languages

#+begin_src emacs-lisp

  (use-package parinfer
    :disabled
    :hook ((clojure-mode . parinfer-mode)
           (emacs-lisp-mode . parinfer-mode)
           (common-lisp-mode . parinfer-mode)
           (scheme-mode . parinfer-mode)
           (lisp-mode . parinfer-mode))
    :config
    (setq parinfer-extensions
          '(defaults       ; should be included.
             pretty-parens  ; different paren styles for different modes.
             smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
             smart-yank)))  ; Yank behavior depend on mode.

  (dw/leader-key-def
    "tp" 'parinfer-toggle-mode)

#+end_src

#+RESULTS:

** Origami.el for Folding

#+begin_src emacs-lisp

  (use-package origami
    :hook ((yaml-mode . origami-mode)
           (python-mode . origami-mode)))

#+end_src

#+RESULTS:
| origami-mode | yasnippet-snippets--fixed-indent | rainbow-mode | python-black-on-save-mode-enable-dwim | tree-sitter-hl-mode | tree-sitter-mode | (closure (bootstrap-version t) nil (conda-env-activate-for-buffer)) | pyvenv-mode | eglot-ensure | evil-collection-python-set-evil-shift-width | ws-butler-mode | doom-modeline-env-setup-python |

* Configuration Files
** Helpers

#+begin_src emacs-lisp

  (defun dw/org-file-jump-to-heading (org-file heading-title)
    (interactive)
    (find-file (expand-file-name org-file))
    (goto-char (point-min))
    (search-forward (concat "* " heading-title))
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

  (defun dw/org-file-show-headings (org-file)
    (interactive)
    (find-file (expand-file-name org-file))
    (counsel-org-goto)
    (org-overview)
    (org-reveal)
    (org-show-subtree)
    (forward-line))

#+end_src

#+RESULTS:
: dw/org-file-show-headings

** Bindings

#+begin_src emacs-lisp :tangle no

  (dw/leader-key-def
    "fn" '((lambda () (interactive) (counsel-find-file "~/Notes/")) :which-key "notes")
    "fd"  '(:ignore t :which-key "dotfiles")
    "fdd" '((lambda () (interactive) (find-file "~/.dotfiles/Desktop.org")) :which-key "desktop")
    "fde" '((lambda () (interactive) (find-file (expand-file-name "~/.dotfiles/Emacs.org"))) :which-key "edit config")
    "fdE" '((lambda () (interactive) (dw/org-file-show-headings "~/.dotfiles/Emacs.org")) :which-key "edit config")
    "fdm" '((lambda () (interactive) (find-file "~/.dotfiles/Mail.org")) :which-key "mail")
    ;; "fdM" '((lambda () (interactive) (counsel-find-file "~/.dotfiles/.config/guix/manifests/")) :which-key "manifests")
    "fds" '((lambda () (interactive) (dw/org-file-jump-to-heading "~/.dotfiles/Systems.org" "Base Configuration")) :which-key "base system")
    "fdS" '((lambda () (interactive) (dw/org-file-jump-to-heading "~/.dotfiles/Systems.org" system-name)) :which-key "this system")
    "fdp" '((lambda () (interactive) (dw/org-file-jump-to-heading "~/.dotfiles/Desktop.org" "Panel via Polybar")) :which-key "polybar")
    "fdw" '((lambda () (interactive) (find-file (expand-file-name "~/.dotfiles/Workflow.org"))) :which-key "workflow")
    "fdv" '((lambda () (interactive) (find-file "~/.dotfiles/.config/vimb/config")) :which-key "vimb"))

#+end_src

* Stateful Keymaps with Hydra

#+begin_src emacs-lisp
  (use-package hydra
    :defer t)
#+end_src

#+RESULTS:

* Completion System
Trying this as an alternative to Ivy and Counsel.
** Preserve Minibuffer History with savehist-mode
#+begin_src emacs-lisp
  (use-package savehist
    :config
    (setq history-length 25)
    (savehist-mode 1))
#+end_src

#+RESULTS:
: t

** Completions with Vertico

#+begin_src emacs-lisp
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
  (setq read-buffer-completion-ignore-case t)

  (defun dw/minibuffer-backward-kill (arg)
    "When minibuffer is completing a file name delete up to parent
    folder, otherwise delete a word"
    (interactive "p")
    (if minibuffer-completing-file-name
        ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
        (if (string-match-p "/." (minibuffer-contents))
            (zap-up-to-char (- arg) ?/)
          (delete-minibuffer-contents))
      (delete-word (- arg))))

  (use-package vertico
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . dw/minibuffer-backward-kill))
    :custom
    (vertico-cycle t)
    :config
    ;; Grow and shrink Vertico minibuffer
    (setq vertico-resize t)
    :custom-face
    (vertico-current ((t (:background "#3a3f5a"))))
    :init
    (vertico-mode))

#+end_src

#+RESULTS:
: dw/minibuffer-backward-kill

** Completions in Regions with Corfu

#+begin_src emacs-lisp
  (use-package corfu
    :bind (:map corfu-map
                ("TAB" . corfu-next)
                ([tab] . corfu-next)
                ("S-TAB" . corfu-previous)
                ([backtab] . corfu-previous))

    ;; Optional customizations
    :custom
    (corfu-cycle t)           ;; Enable cycling for `corfu-next/previous'
    (corfu-auto t)                 ;; Enable auto completion
    (corfu-auto-delay 0.1)
    (corfu-auto-prefix 1)

    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; :config
    (add-hook 'eglot-completion-at-point-functions #'corfu-eglot-complete nil t)
    :init
    (global-corfu-mode))

  (use-package emacs
    :init
    ;; TAB cycle if there are only few candidates
    (setq completion-cycle-threshold 3)

    ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
    ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
    ;; (setq read-extended-command-predicate
    ;;       #'command-completion-default-include-p)

    ;; Enable indentation+completion using the TAB key.
    ;; `completion-at-point' is often bound to M-TAB.
    (setq tab-always-indent 'complete))
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  ;; Use Dabbrev with Corfu!

  (use-package dabbrev

    :after corfu
    ;; Swap M-/ and C-M-/
    :bind (("M-:" . dabbrev-completion)
           ("C-M-:" . dabbrev-expand))
    ;; Other useful Dabbrev configurations.
    :custom
    (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))
#+end_src

#+RESULTS:
: dabbrev-expand

** Improved Candidate Filtering with Orderless

#+begin_src emacs-lisp

  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles . (partial-completion))))))

#+end_src

#+RESULTS:

** Consult Commands
Consult provides a lot of useful completion commands similar to Ivy's Counsel.

#+begin_src emacs-lisp

  (defun dw/get-project-root ()
    (when (fboundp 'projectile-project-root)
      (projectile-project-root)))

  (use-package consult
    :demand t
    :bind (("C-s" . consult-line)
           ("C-M-l" . consult-imenu)
           ("C-M-j" . persp-switch-to-buffer*)
           :map minibuffer-local-map
           ("C-r" . consult-history))
    :custom
    (consult-project-root-function #'dw/get-project-root)
    (completion-in-region-function #'consult-completion-in-region))

#+end_src

#+RESULTS:
: consult-history
** Switching Directories with consult-dir

#+begin_src emacs-lisp

  (use-package consult-dir
    :bind (("C-x C-d" . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file))
    :custom
    (consult-dir-project-list-function nil))

  ;; Thanks Karthik!
  (with-eval-after-load 'eshell-mode
    (defun eshell/z (&optional regexp)
      "Navigate to a previously visited directory in eshell."
      (let ((eshell-dirs (delete-dups (mapcar 'abbreviate-file-name
                                              (ring-elements eshell-last-dir-ring)))))
        (cond
         ((and (not regexp) (featurep 'consult-dir))
          (let* ((consult-dir--source-eshell `(:name "Eshell"
                                                     :narrow ?e
                                                     :category file
                                                     :face consult-file
                                                     :items ,eshell-dirs))
                 (consult-dir-sources (cons consult-dir--source-eshell consult-dir-sources)))
            (eshell/cd (substring-no-properties (consult-dir--pick "Switch directory: ")))))
         (t (eshell/cd (if regexp (eshell-find-previous-directory regexp)
                         (completing-read "cd: " eshell-dirs))))))))

#+end_src

#+RESULTS:

** Completion Annotations with Marginalia

Marginalia provides helpful annotations for various types of minibuffer completions.  You can think of it as a replacement of =ivy-rich=.

#+begin_src emacs-lisp

  (use-package marginalia
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))

#+end_src

#+RESULTS:

** Completion Actions with Embark

#+begin_src emacs-lisp

  (use-package embark
    :bind (("C-s-a" . embark-act)
           :map minibuffer-local-map
           ("C-d" . embark-act))
    :config

    ;; Show Embark actions via which-key
    (setq embark-action-indicator
          (lambda (map)
            (which-key--show-keymap "Embark" map nil nil 'no-paging)
            #'which-key--hide-popup-ignore-command)
          embark-become-indicator embark-action-indicator))

  (use-package embark-consult

    :after embark
    :hook (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

#+RESULTS:

** company-mode
#+begin_src emacs-lisp :tangle no
  (use-package company
    :bind (:map prog-mode-map
                ("C-i" . company-indent-or-complete-common)
                ("C-M-i" . counsel-company))
    :hook (python-mode . company-mode))

  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode))

  (use-package company-box
    :after company
    :hook (company-mode . company-box-mode))

#+end_src
* Buffer Management with Bufler

[[https://github.com/alphapapa/bufler.el][Bufler]] is an excellent package by [[https://github.com/alphapapa][alphapapa]] which enables you to automatically group all of your Emacs buffers into workspaces by defining a series of grouping rules.  Once you have your groups defined (or use the default configuration which is quite good already), you can use the =bufler-workspace-frame-set= command to focus your current Emacs frame on a particular workspace so that =bufler-switch-buffer= will only show buffers from that workspace.  In my case, this allows me to dedicate an EXWM workspace to a specific Bufler workspace so that only see the buffers I care about in that EXWM workspace.

I'm trying to figure out how to integrate Bufler with Ivy more effectively (buffer previewing, alternate actions, etc), will update this config once I've done that.

#+begin_src emacs-lisp

  (use-package bufler
    :disabled
    :bind (("C-M-j" . bufler-switch-buffer)
           ("C-M-k" . bufler-workspace-frame-set))
    :config
    (evil-collection-define-key 'normal 'bufler-list-mode-map
      (kbd "RET")   'bufler-list-buffer-switch
      (kbd "M-RET") 'bufler-list-buffer-peek
      "D"           'bufler-list-buffer-kill)

    (setf bufler-groups
          (bufler-defgroups
           ;; Subgroup collecting all named workspaces.
           (group (auto-workspace))
           ;; Subgroup collecting buffers in a projectile project.
           (group (auto-projectile))
           ;; Grouping browser windows
           (group
            (group-or "Browsers"
                      (name-match "Vimb" (rx bos "vimb"))
                      (name-match "Qutebrowser" (rx bos "Qutebrowser"))
                      (name-match "Chromium" (rx bos "Chromium"))))
           (group
            (group-or "Chat"
                      (mode-match "Telega" (rx bos "telega-"))))
           (group
            ;; Subgroup collecting all `help-mode' and `info-mode' buffers.
            (group-or "Help/Info"
                      (mode-match "*Help*" (rx bos (or "help-" "helpful-")))
                      ;; (mode-match "*Helpful*" (rx bos "helpful-"))
                      (mode-match "*Info*" (rx bos "info-"))))
           (group
            ;; Subgroup collecting all special buffers (i.e. ones that are not
            ;; file-backed), except `magit-status-mode' buffers (which are allowed to fall
            ;; through to other groups, so they end up grouped with their project buffers).
            (group-and "*Special*"
                       (name-match "**Special**"
                                   (rx bos "*" (or "Messages" "Warnings" "scratch" "Backtrace" "Pinentry") "*"))
                       (lambda (buffer)
                         (unless (or (funcall (mode-match "Magit" (rx bos "magit-status"))
                                              buffer)
                                     (funcall (mode-match "Dired" (rx bos "dired"))
                                              buffer)
                                     (funcall (auto-file) buffer))
                           "*Special*"))))
           ;; Group remaining buffers by major mode.
           (auto-mode))))

#+end_src

#+RESULTS:

* Window Management
** Frame Scaling / Zooming

The keybindings for this are =C+M+-= and =C+M+==.

#+begin_src emacs-lisp

  (use-package default-text-scale
    :defer 1
    :config
    (default-text-scale-mode))

#+end_src

#+RESULTS:

** Window Selection with ace-window

=ace-window= helps with easily switching between windows based on a predefined set of keys used to identify each.

#+begin_src emacs-lisp

  (use-package ace-window
    :bind (("M-o" . ace-window))
    :custom
    (aw-scope 'frame)
    (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (aw-minibuffer-flag t)
    :config
    (ace-window-display-mode 1))

#+end_src

#+RESULTS:
: ace-window

** Window History with winner-mode

#+begin_src emacs-lisp

  (use-package winner
    :config
    (winner-mode)
    )

#+end_src

#+RESULTS:
: t

** Set Margins for Modes

#+begin_src emacs-lisp

  (defun dw/center-buffer-with-margins ()
    (let ((margin-size (/ (- (frame-width) 80) 3)))
      (set-window-margins nil margin-size margin-size)))

  (defun dw/org-mode-visual-fill ()
    (setq visual-fill-column-width 130
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . dw/org-mode-visual-fill))

#+end_src

#+RESULTS:
| #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | dw/org-mode-setup | org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | evil-org-mode | ob-ipython-auto-configure-kernels | org-superstar-mode | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-appear-mode | org-make-toc-mode | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

** Control Buffer Placement

Emacs' default buffer placement algorithm is pretty disruptive if you like setting up window layouts a certain way in your workflow.  The =display-buffer-alist= variable controls this behavior and you can customize it to prevent Emacs from popping up new windows when you run commands.

#+begin_src emacs-lisp

  (setq display-buffer-base-action
        '(display-buffer-reuse-mode-window
          display-buffer-reuse-window
          display-buffer-same-window))

  ;; If a popup does happen, don't resize windows to be equal-sized
  (setq even-window-sizes nil)

#+end_src

#+RESULTS:

** Taming Popups with Popper.el

#+begin_src emacs-lisp

  (defun dw/popper-window-height (window)
    (let (buffer-mode (with-current-buffer (window-buffer window)
                        major-mode))
      (pcase buffer-mode
        ('exwm-mode 40)
        (_ 15))))

  (use-package popper
    ;; :straight (popper :host github
    ;;                   :repo "karthink/popper"
    ;;                   :build (:not autoloads))
    :bind (("C-M-'" . popper-toggle-latest)
           ("M-'" . popper-cycle)
           ("C-M-\"" . popper-toggle-type))
    :custom
    (popper-window-height 12)
    ;; (popper-window-height
    ;; (lambda (window)
    ;;   (let ((buffer-mode (with-current-buffer (window-buffer window)
    ;;                        major-mode)))
    ;;     (message "BUFFER MODE: %s" buffer-mode)
    ;;     (pcase buffer-mode
    ;;       ('exwm-mode 40)
    ;;       ('helpful-mode 20)
    ;;       ('eshell-mode (progn (message "eshell!") 10))
    ;;       (_ 15)))))
    (popper-reference-buffers
     '("^\\*eshell\\*"
       "^vterm"
       help-mode
       helpful-mode
       compilation-mode))
    :init
    (require 'popper) ;; Needed because I disabled autoloads
    (popper-mode 1))

#+end_src

#+RESULTS:
: popper-toggle-type

* File Browsing
** Dired
#+begin_src emacs-lisp

  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package dired
    :straight nil
    ;; :after evil
    :defer 1
    :commands (dired dired-jump)
    :config

    (setq dired-listing-switches "-agho --group-directories-first"
          dired-omit-files "^\\.[^.].*"
          dired-omit-verbose nil
          dired-hide-details-hide-symlink-targets nil
          delete-by-moving-to-trash t)

    (autoload 'dired-omit-mode "dired-x")

    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))

    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                (dired-omit-mode 1)
                (dired-hide-details-mode 1)
                (s-equals? "/gnu/store/" (expand-file-name default-directory))
                (all-the-icons-dired-mode 1)
                (hl-line-mode 1)))

    (use-package dired-rainbow
      :defer 2
      :config
      (dired-rainbow-define-chmod directory "#6cb2eb" "d.*")
      (dired-rainbow-define html "#eb5286" ("css" "less" "sass" "scss" "htm" "html" "jhtm" "mht" "eml" "mustache" "xhtml"))
      (dired-rainbow-define xml "#f2d024" ("xml" "xsd" "xsl" "xslt" "wsdl" "bib" "json" "msg" "pgn" "rss" "yaml" "yml" "rdata"))
      (dired-rainbow-define document "#9561e2" ("docm" "doc" "docx" "odb" "odt" "pdb" "pdf" "ps" "rtf" "djvu" "epub" "odp" "ppt" "pptx"))
      (dired-rainbow-define markdown "#ffed4a" ("org" "etx" "info" "markdown" "md" "mkd" "nfo" "pod" "rst" "tex" "textfile" "txt"))
      (dired-rainbow-define database "#6574cd" ("xlsx" "xls" "csv" "accdb" "db" "mdb" "sqlite" "nc"))
      (dired-rainbow-define media "#de751f" ("mp3" "mp4" "mkv" "MP3" "MP4" "avi" "mpeg" "mpg" "flv" "ogg" "mov" "mid" "midi" "wav" "aiff" "flac"))
      (dired-rainbow-define image "#f66d9b" ("tiff" "tif" "cdr" "gif" "ico" "jpeg" "jpg" "png" "psd" "eps" "svg"))
      (dired-rainbow-define log "#c17d11" ("log"))
      (dired-rainbow-define shell "#f6993f" ("awk" "bash" "bat" "sed" "sh" "zsh" "vim"))
      (dired-rainbow-define interpreted "#38c172" ("py" "ipynb" "rb" "pl" "t" "msql" "mysql" "pgsql" "sql" "r" "clj" "cljs" "scala" "js"))
      (dired-rainbow-define compiled "#4dc0b5" ("asm" "cl" "lisp" "el" "c" "h" "c++" "h++" "hpp" "hxx" "m" "cc" "cs" "cp" "cpp" "go" "f" "for" "ftn" "f90" "f95" "f03" "f08" "s" "rs" "hi" "hs" "pyc" ".java"))
      (dired-rainbow-define executable "#8cc4ff" ("exe" "msi"))
      (dired-rainbow-define compressed "#51d88a" ("7z" "zip" "bz2" "tgz" "txz" "gz" "xz" "z" "Z" "jar" "war" "ear" "rar" "sar" "xpi" "apk" "xz" "tar"))
      (dired-rainbow-define packaged "#faad63" ("deb" "rpm" "apk" "jad" "jar" "cab" "pak" "pk3" "vdf" "vpk" "bsp"))
      (dired-rainbow-define encrypted "#ffed4a" ("gpg" "pgp" "asc" "bfe" "enc" "signature" "sig" "p12" "pem"))
      (dired-rainbow-define fonts "#6cb2eb" ("afm" "fon" "fnt" "pfb" "pfm" "ttf" "otf"))
      (dired-rainbow-define partition "#e3342f" ("dmg" "iso" "bin" "nrg" "qcow" "toast" "vcd" "vmdk" "bak"))
      (dired-rainbow-define vc "#0074d9" ("git" "gitignore" "gitattributes" "gitmodules"))
      (dired-rainbow-define-chmod executable-unix "#38c172" "-.*x.*"))

    ;;  (use-package dired-single
    ;;  :defer t)

    (use-package dired-ranger
      :defer t)

    (use-package dired-collapse
      :defer t)
    )
#+end_src

#+RESULTS:
: t

* Org Mode
** Fonts
#+begin_src emacs-lisp
  ;; Increase the size of various headings
  (defun my/org-fonts ()
    
    (set-face-attribute 'org-document-title nil :font "Cantarell" :weight 'bold :height 1.3)
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'medium :height (cdr face)))

    ;; Make sure org-indent face is available
    (require 'org-indent)

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-formula nil  :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)

    ;; Get rid of the background on column views
    (set-face-attribute 'org-column nil :background nil)
    (set-face-attribute 'org-column-title nil :background nil))
#+end_src

#+RESULTS:
: my/org-fonts

** Block templates
#+begin_src emacs-lisp
  (defun my/org-block-templates ()

    ;; Block Templates
    ;; the template.  More documentation can be found at the Org Mode [[https://orgmode.org/manual/Easy-templates.html][Easy Templates]]
    ;; documentation page.

    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("img" . "imagecontainer"))
    (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("li" . "src lisp"))
    (add-to-list 'org-structure-template-alist '("sc" . "src scheme"))
    (add-to-list 'org-structure-template-alist '("ts" . "src typescript"))
    (add-to-list 'org-structure-template-alist '("py" . "src python"))
    (add-to-list 'org-structure-template-alist '("ipy" . "src ipython :results drawer :async t :session mysession"))
    (add-to-list 'org-structure-template-alist '("go" . "src go"))
    (add-to-list 'org-structure-template-alist '("yaml" . "src yaml"))
    (add-to-list 'org-structure-template-alist '("json" . "src json")))

#+end_src


#+RESULTS:
: my/org-block-templates

** org configuration
Set up Org Mode with a baseline configuration.  The following sections will add more things to it.

#+begin_src emacs-lisp
  ;; Org mode
  (setq-default fill-column 80)

  ;; Turn on indentation and auto-fill mode for Org files
  (defun dw/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (setq org-support-shift-select t)
    (diminish org-indent-mode))

  ;; Make sure Straight pulls Org from Guix
  (straight-use-package '(org :type built-in))

  (use-package org
    ;; :straight (org-plus-contrib
    ;;            :type git
    ;;            :host github
    ;;            :repo "emacs-straight/org-mode"
    ;;            :local-repo "org")
    ;; :straight (org-plus-contrib :repo "https://code.orgmode.org/bzg/org-mode.git" :local-repo "org" :files ("*.el" "lisp/*.el" "contrib/lisp/*.el"))
    :ensure t
    :defer t
    :hook ((org-mode . dw/org-mode-setup)
           (org-mode . my/org-fonts)
           (org-mode . my/org-block-templates))
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup t
          org-src-preserve-indentation nil
          org-startup-folded nil
          org-cycle-separator-lines 2
          org-capture-bookmark nil)

    (setq org-modules
          '(org-crypt
            org-habit
            ))

    (setq org-refile-targets '((nil :maxlevel . 1)
                               (org-agenda-files :maxlevel . 1)))

    (setq org-outline-path-complete-in-steps nil)
    (setq org-refile-use-outline-path t)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-j") 'org-next-visible-heading)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "C-k") 'org-previous-visible-heading)

    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-j") 'org-metadown)
    (evil-define-key '(normal insert visual) org-mode-map (kbd "M-k") 'org-metaup)

    (setq org-startup-with-inline-images t) ;; Display inline images on startup
    (setq org-confirm-babel-evaluate nil) ;; Don't prompt for confirmation when evaluating code blocks
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append) ;; Display inline images

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (shell . t)
       (ipython . t)
       (C . t)
       ))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

    (require 'ox-latex)
    (require 'ox-md))

  #+end_src

  #+RESULTS:
  | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | org-appear-mode | evil-org-mode | org-superstar-mode | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-make-toc-mode | my/org-block-templates | my/org-fonts | dw/org-mode-setup | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

** ob-ipython
#+begin_src emacs-lisp
  (use-package  ob-ipython
    :after org
    :config
    ;; set default ipython exex
    (setq org-babel-python-command "/home/leon/mambaforge/bin/python3")

    ;; fix bug with json and obipython
    (advice-add 'ob-ipython--collect-json :before
                (lambda (&rest args)
                  (let ((start (point)))
                    (set-mark (point))
                    (while (re-search-forward "{" nil t)
                      (backward-char)
                      (kill-region (region-beginning) (region-end))
                      (re-search-forward "}\n" nil t)
                      (set-mark (point)))
                    (end-of-buffer)
                    (kill-region (region-beginning) (region-end))
                    (goto-char start)))))

#+end_src

#+RESULTS:
: t

** ox-ipynb
#+begin_src emacs-lisp
  (use-package ox-ipynb
    :straight (ox-ipynb
               :type git
               :host github
               :repo "jkitchin/ox-ipynb")
    :after org
    :config
    (require 'ox-ipynb))

#+end_src

#+RESULTS:
: t

** Bullets
#+begin_src emacs-lisp
  ;; Use bullet characters instead of asterisks, plus set the header font sizes to something more palatable.  A fair amount of inspiration has been taken from [[https://zzamboni.org/post/beautifying-org-mode-in-emacs/][this blog post]].

  (use-package org-superstar
    :after org
    :hook (org-mode . org-superstar-mode)
    :custom
    (org-superstar-remove-leading-stars t)
    (org-superstar-headline-bullets-list '("◉" "○" "●" "○" "●" "○" "●")))
  
#+end_src

#+RESULTS:
| org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | org-appear-mode | evil-org-mode | org-superstar-mode | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-make-toc-mode | my/org-block-templates | my/org-fonts | dw/org-mode-setup | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

** Bindings

#+begin_src emacs-lisp

  (use-package evil-org
    :after org
    :hook ((org-mode . evil-org-mode)
           (org-agenda-mode . evil-org-mode)
           (evil-org-mode . (lambda () (evil-org-set-key-theme '(navigation todo insert textobjects additional)))))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (dw/leader-key-def
    "o"   '(:ignore t :which-key "org mode")

    "oi"  '(:ignore t :which-key "insert")
    "oil" '(org-insert-link :which-key "insert link")

    "on"  '(org-toggle-narrow-to-subtree :which-key "toggle narrow")

    "os"  '(dw/counsel-rg-org-files :which-key "search notes")

    "oa"  '(org-agenda :which-key "status")
    "ot"  '(org-todo-list :which-key "todos")
    "oc"  '(org-capture t :which-key "capture")
    "ox"  '(org-export-dispatch t :which-key "export"))

#+end_src

#+RESULTS:

** a few useful functions
*** Searching
#+begin_src emacs-lisp
  (defun dw/search-org-files ()
    (interactive)
    (counsel-rg "" "~/Notes" nil "Search Notes: "))
#+end_src

#+RESULTS:
: dw/search-org-files

** Update Table of Contents on Save
It's nice to have a table of contents section for long literate configuration files (like this one!) so I use =org-make-toc= to automatically update the ToC in any header with a property named =TOC=.
#+begin_src emacs-lisp

  (use-package org-make-toc
    :hook (org-mode . org-make-toc-mode))

#+end_src

#+RESULTS:
| org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | org-appear-mode | evil-org-mode | org-superstar-mode | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-make-toc-mode | my/org-block-templates | my/org-fonts | dw/org-mode-setup | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

** Calendar Sync

#+begin_src emacs-lisp

  (use-package org-caldav
    :after org
    :init
    (require 'org-caldav)
    (setq org-caldav-url "https://caldav.fastmail.com/dav/calendars/user/daviwil@fastmail.fm/"
          ;; org-caldav-files '("~/Notes/Calendar/Personal.org" "~/Notes/Calendar/Work.org")
          ;; org-caldav-inbox '("~/Notes/Calendar/Personal.org" "~/Notes/Calendar/Work.org")
          org-caldav-calendar-id "fe098bfb-0726-4e10-bff2-55f8278c8a56"
          org-caldav-files '("~/Notes/Calendar/Personal.org")
          org-caldav-inbox "~/Notes/Calendar/PersonalInbox.org"
          org-caldav-calendars
          '((:calendar-id "fe098bfb-0726-4e10-bff2-55f8278c8a56"
                          :files ("~/Notes/Calendar/Personal.org")
                          :inbox "~/Notes/Calendar/PersonalInbox.org"))
          ;; (:calendar-id "8f150437-cc57-4ba0-9200-d1d98389e2e4"
          ;;  :files ("~/Notes/Calendar/Work.org")
          ;;  :inbox "~/Notes/Calendar/Work.org"))
          org-caldav-delete-org-entries 'always
          org-caldav-delete-calendar-entries 'never))

#+end_src

#+RESULTS:

** Reminders
#+begin_src emacs-lisp
  (use-package org-wild-notifier
    :after org
    :config
    ;; Make sure we receive notifications for non-TODO events
    ;; like those synced from Google Calendar
    (setq org-wild-notifier-keyword-whitelist nil)
    (setq org-wild-notifier-notification-title "Agenda Reminder")
    (setq org-wild-notifier-alert-time 15)
    (org-wild-notifier-mode))
#+end_src

#+RESULTS:
: t

** Presentations
*** org-present

=org-present= is the package I use for giving presentations in Emacs.  I like it because it's simple and allows me to customize the display of it pretty easily.

#+begin_src emacs-lisp

  (defun dw/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun dw/org-present-hook ()
    (setq-local face-remapping-alist '((default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.5) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-code (:height 1.55) org-code)
                                       (org-verbatim (:height 1.55) org-verbatim)
                                       (org-block (:height 1.25) org-block)
                                       (org-block-begin-line (:height 0.7) org-block)))
    (setq header-line-format " ")
    (org-appear-mode -1)
    (org-display-inline-images)
    (dw/org-present-prepare-slide))

  (defun dw/org-present-quit-hook ()
    (setq-local face-remapping-alist '((default variable-pitch default)))
    (setq header-line-format nil)
    (org-present-small)
    (org-remove-inline-images)
    (org-appear-mode 1))

  (defun dw/org-present-prev ()
    (interactive)
    (org-present-prev)
    (dw/org-present-prepare-slide))

  (defun dw/org-present-next ()
    (interactive)
    (org-present-next)
    (dw/org-present-prepare-slide)
    (when (fboundp 'live-crafter-add-timestamp)
      (live-crafter-add-timestamp (substring-no-properties (org-get-heading t t t t)))))

  (use-package org-present
    :bind (:map org-present-mode-keymap
                ("C-c C-j" . dw/org-present-next)
                ("C-c C-k" . dw/org-present-prev))
    :hook ((org-present-mode . dw/org-present-hook)
           (org-present-mode-quit . dw/org-present-quit-hook)))

#+end_src

#+RESULTS:

*** org-tree-slide

I previously used =org-tree-slide= for presentations before trying out =org-present=.  I'm keeping my old configuration around here just in case I need to use it again!

#+begin_src emacs-lisp :tangle no

  (defun dw/org-start-presentation ()
    (interactive)
    (org-tree-slide-mode 1)
    (setq text-scale-mode-amount 3)
    (text-scale-mode 1))

  (defun dw/org-end-presentation ()
    (interactive)
    (text-scale-mode 0)
    (org-tree-slide-mode 0))

  (use-package org-tree-slide
    :defer t
    :after org
    :commands org-tree-slide-mode
    :config
    ;; (evil-define-key 'normal org-tree-slide-mode-map
    ;;   (kbd "q") 'dw/org-end-presentation
    ;;   (kbd "C-j") 'org-tree-slide-move-next-tree
    ;;   (kbd "C-k") 'org-tree-slide-move-previous-tree)
    (setq org-tree-slide-slide-in-effect nil
          org-tree-slide-activate-message "Presentation started."
          org-tree-slide-deactivate-message "Presentation ended."
          org-tree-slide-header t))

#+end_src

#+RESULTS:

** Org Roam
#+begin_src emacs-lisp :tangle no
  (defvar dw/org-roam-project-template
    '("p" "project" plain "** TODO %?"
      :if-new (file+head+olp "%<%Y%m%d%H%M%S>-${slug}.org"
                             "#+title: ${title}\n#+category: ${title}\n#+filetags: Project\n"
                             ("Tasks"))))

  (defun my/org-roam-filter-by-tag (tag-name)
    (lambda (node)
      (member tag-name (org-roam-node-tags node))))

  (defun my/org-roam-list-notes-by-tag (tag-name)
    (mapcar #'org-roam-node-file
            (seq-filter
             (my/org-roam-filter-by-tag tag-name)
             (org-roam-node-list))))

  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (push arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

  (defun dw/org-roam-goto-month ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y-%B")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("m" "month" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y-%B>.org"
                                                        "#+title: %<%Y-%B>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun dw/org-roam-goto-year ()
    (interactive)
    (org-roam-capture- :goto (when (org-roam-node-from-title-or-alias (format-time-string "%Y")) '(4))
                       :node (org-roam-node-create)
                       :templates '(("y" "year" plain "\n* Goals\n\n%?* Summary\n\n"
                                     :if-new (file+head "%<%Y>.org"
                                                        "#+title: %<%Y>\n#+filetags: Project\n")
                                     :unnarrowed t))))

  (defun dw/org-roam-capture-task ()
    (interactive)
    ;; Add the project file to the agenda after capture is finished
    (add-hook 'org-capture-after-finalize-hook #'my/org-roam-project-finalize-hook)

    ;; Capture the new task, creating the project file if necessary
    (org-roam-capture- :node (org-roam-node-read
                              nil
                              (my/org-roam-filter-by-tag "Project"))
                       :templates (list dw/org-roam-project-template)))

  (defun my/org-roam-refresh-agenda-list ()
    (interactive)
    (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

  (defhydra dw/org-roam-jump-menu (:hint nil)
    "
  ^Dailies^        ^Capture^       ^Jump^
  ^^^^^^^^-------------------------------------------------
  _t_: today       _T_: today       _m_: current month
  _r_: tomorrow    _R_: tomorrow    _e_: current year
  _y_: yesterday   _Y_: yesterday   ^ ^
  _d_: date        ^ ^              ^ ^
  "
    ("t" org-roam-dailies-goto-today)
    ("r" org-roam-dailies-goto-tomorrow)
    ("y" org-roam-dailies-goto-yesterday)
    ("d" org-roam-dailies-goto-date)
    ("T" org-roam-dailies-capture-today)
    ("R" org-roam-dailies-capture-tomorrow)
    ("Y" org-roam-dailies-capture-yesterday)
    ("m" dw/org-roam-goto-month)
    ("e" dw/org-roam-goto-year)
    ("c" nil "cancel"))

  (use-package org-roam
    :after org
    :init
    (setq org-roam-v2-ack t)
    (setq dw/daily-note-filename "%<%Y-%m-%d>.org"
          dw/daily-note-header "#+title: %<%Y-%m-%d %a>\n\n[[roam:%<%Y-%B>]]\n\n")
    :custom
    (org-roam-directory "~/Notes/Roam/")
    (org-roam-dailies-directory "Journal/")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain "%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                           "#+title: ${title}\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
     `(("d" "default" entry
        "* %?"
        :if-new (file+head ,dw/daily-note-filename
                           ,dw/daily-note-header))
       ("t" "task" entry
        "* TODO %?\n  %U\n  %a\n  %i"
        :if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Tasks"))
        :empty-lines 1)
       ("l" "log entry" entry
        "* %<%I:%M %p> - %?"
        :if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))
       ("j" "journal" entry
        "* %<%I:%M %p> - Journal  :journal:\n\n%?\n\n"
        :if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))
       ("m" "meeting" entry
        "* %<%I:%M %p> - %^{Meeting Title}  :meetings:\n\n%?\n\n"
        :if-new (file+head+olp ,dw/daily-note-filename
                               ,dw/daily-note-header
                               ("Log")))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n d" . dw/org-roam-jump-menu/body)
           ("C-c n c" . org-roam-dailies-capture-today)
           ("C-c n t" . dw/org-roam-capture-task)
           ("C-c n g" . org-roam-graph)
           :map org-mode-map
           (("C-c n i" . org-roam-node-insert)
            ("C-c n I" . org-roam-insert-immediate)))
    :config
    (org-roam-db-autosync-mode)

    ;; Build the agenda list the first time for the session
    (my/org-roam-refresh-agenda-list))

#+end_src

#+RESULTS:
: org-roam-insert-immediate

** Deft

#+begin_src emacs-lisp :tangle no

  (use-package deft
    :commands (deft)
    :config (setq deft-directory "~/Notes/Roam"
                  deft-recursive t
                  deft-extensions '("md" "org")))

#+end_src

#+RESULTS:

** Auto-show Markup Symbols
This package makes it much easier to edit Org documents when =org-hide-emphasis-markers= is turned on.  It temporarily shows the emphasis markers around certain markup elements when you place your cursor inside of them.  No more fumbling around with ~=~ and ~*~ characters!

#+begin_src emacs-lisp

  (use-package org-appear
    :after org
    :hook (org-mode . org-appear-mode))

#+end_src

#+RESULTS:
| org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | org-appear-mode | evil-org-mode | org-superstar-mode | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-make-toc-mode | my/org-block-templates | my/org-fonts | dw/org-mode-setup | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |

** org-cv
#+begin_src emacs-lisp
  (use-package ox-awesomecv
    :straight '(org-cv :host gitlab :repo "Titan-C/org-cv"))
#+end_src
#+RESULTS:

* Development
Configuration for various programming languages and dev tools that I use.
** Git
*** Magit
https://magit.vc/manual/magit/

#+begin_src emacs-lisp

  (use-package magit
    :bind ("C-M-;" . magit-status)
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

  (dw/leader-key-def
    "g"   '(:ignore t :which-key "git")
    "gs"  'magit-status
    "gd"  'magit-diff-unstaged
    "gc"  'magit-branch-or-checkout
    "gl"   '(:ignore t :which-key "log")
    "glc" 'magit-log-current
    "glf" 'magit-log-buffer-file
    "gb"  'magit-branch
    "gP"  'magit-push-current
    "gp"  'magit-pull-branch
    "gf"  'magit-fetch
    "gF"  'magit-fetch-all
    "gr"  'magit-rebase)

#+end_src

#+RESULTS:

*** magit-todos

This is an interesting extension to Magit that shows a TODOs section in your
git status buffer containing all lines with TODO (or other similar words) in
files contained within the repo.  More information at the [[https://github.com/alphapapa/magit-todos][GitHub repo]].

#+begin_src emacs-lisp

  (use-package magit-todos
    :defer t)

#+end_src

#+RESULTS:

*** git-link

#+begin_src emacs-lisp
  (use-package git-link
    :commands git-link
    :config
    (setq git-link-open-in-browser t)
    (dw/leader-key-def
      "gL"  'git-link))

#+end_src

#+RESULTS:

*** Git Gutter

#+begin_src emacs-lisp

  (use-package git-gutter
    ;; :straight git-gutter-fringe
    :diminish
    :hook ((text-mode . git-gutter-mode)
           (prog-mode . git-gutter-mode))
    :config
    (setq git-gutter:update-interval 2)
    (require 'git-gutter-fringe)
    (set-face-foreground 'git-gutter-fr:added "LightGreen")
      (fringe-helper-define 'git-gutter-fr:added nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX")

      (set-face-foreground 'git-gutter-fr:modified "LightGoldenrod")
      (fringe-helper-define 'git-gutter-fr:modified nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX")

      (set-face-foreground 'git-gutter-fr:deleted "LightCoral")
      (fringe-helper-define 'git-gutter-fr:deleted nil
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        ".........."
        ".........."
        "XXXXXXXXXX"
        "XXXXXXXXXX"
        "XXXXXXXXXX")

    ;; These characters are used in terminal mode
    (setq git-gutter:modified-sign "≡")
    (setq git-gutter:added-sign "≡")
    (setq git-gutter:deleted-sign "≡")
    (set-face-foreground 'git-gutter:added "LightGreen")
    (set-face-foreground 'git-gutter:modified "LightGoldenrod")
    (set-face-foreground 'git-gutter:deleted "LightCoral"))

#+end_src

#+RESULTS:
| rainbow-delimiters-mode | smartparens-mode | yas-minor-mode | ws-butler-mode | git-gutter-mode | (closure ((mode . prog-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 1)) |

** Projectile
#+begin_src emacs-lisp

  (defun dw/switch-project-action ()
    "Switch to a workspace with the project name and start `magit-status'."
    ;; TODO: Switch to EXWM workspace 1?
    (persp-switch (projectile-project-name))
    (magit-status))

  (use-package projectile
    :commands projectile-mode
    :diminish projectile-mode
    :bind ("C-M-p" . projectile-find-file)
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :config
    (projectile-mode)
    (add-hook 'prog-mode-hook 'eglot-ensure)
    (with-eval-after-load 'projectile
      (setq projectile-project-root-files
            (append '("compile_commands.json") projectile-project-root-files)))
    (add-to-list 'eglot-server-programs '(c++-mode . ((concat eglot-executable "-clangd") "--header-insertion=never")))
    ;; :init
    ;; (when (file-directory-p "~/Projects/Code")
    ;;   (setq projectile-project-search-path '("~/Projects/Code")))
    ;; (setq projectile-switch-project-action #'dw/switch-project-action))
    )

  (use-package counsel-projectile
    :disabled
    :after projectile
    :config
    (counsel-projectile-mode))

  (dw/leader-key-def
    "pf"  'projectile-find-file
    "ps"  'projectile-switch-project
    "pF"  'consult-ripgrep
    "pp"  'projectile-find-file
    "pc"  'projectile-compile-project
    "pd"  'projectile-dired)

#+end_src

#+RESULTS:

** Languages
*** Language Server Support

#+begin_src emacs-lisp :tangle no

  (use-package lsp-mode
    :hook ((c++-mode python-mode) . lsp-deferred)
    :commands lsp
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :custom (lsp-headerline-breadcrumb-enable nil))

  (dw/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "ld" 'xref-find-definitions
    "lr" 'xref-find-references
    "ln" 'lsp-ui-find-next-reference
    "lp" 'lsp-ui-find-prev-reference
    "ls" 'counsel-imenu
    "le" 'lsp-ui-flycheck-list
    "lS" 'lsp-ui-sideline-mode
    "lX" 'lsp-execute-code-action)

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05))

  ;; (use-package lsp-ivy
  ;;   :hook (lsp-mode . lsp-ivy-mode))

  (use-package lsp-treemacs
    :after lsp)

#+end_src

#+RESULTS:
*** Eglot
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.cpp\\'" . c++-mode))
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

  (use-package eglot
    :straight t
    :hook
    (c-mode . eglot-ensure)
    (c++-mode . eglot-ensure)
    (python-mode . eglot-ensure)
    :config
    (add-to-list 'eglot-server-programs '(c++-mode . ("ccls" "--init={\"clang\":{\"includePath\":[\"/usr/include/c++/11\"]}}")))
    (add-to-list 'eglot-server-programs '(python-mode . ("pyright-langserver" "--stdio" "--enable-folding" "--completion" "snippets")))
    ;; Use corfu for completions using Eglot
    (add-hook 'eglot-completion-at-point-functions #'corfu-eglot-complete nil t))

#+end_src

#+RESULTS:
| rainbow-mode | (closure (bootstrap-version t) nil (setq fill-column 88) (auto-fill-mode t) (display-fill-column-indicator-mode 1)) | blacken-mode | tree-sitter-hl-mode | tree-sitter-mode | (closure (bootstrap-version t) nil (conda-env-activate-for-buffer)) | eglot-ensure | evil-collection-python-set-evil-shift-width | doom-modeline-env-setup-python |

*** Debug Adapter Support
#+begin_src emacs-lisp

  (use-package dap-mode
    :commands dap-debug
    :custom
    (lsp-enable-dap-auto-configure nil)
    :config
    (dap-ui-mode 1)
    (dap-tooltip-mode 1)
    (require 'dap-node)
    (dap-node-setup))

#+end_src
#+RESULTS:
: t
*** TypeScript and JavaScript
Configure TypeScript and JavaScript language modes
#+begin_src emacs-lisp

  (use-package typescript-mode
    :mode "\\.ts\\'"
    :config
    (setq typescript-indent-level 2))

  (defun dw/set-js-indentation ()
    (setq js-indent-level 2)
    ;; (setq evil-shift-width js-indent-level)
    (setq-default tab-width 2))

  (use-package js2-mode
    :mode "\\.jsx?\\'"
    :config
    ;; Use js2-mode for Node scripts
    (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

    ;; Don't use built-in syntax checking
    (setq js2-mode-show-strict-warnings nil)

    ;; Set up proper indentation in JavaScript and JSON files
    (add-hook 'js2-mode-hook #'dw/set-js-indentation)
    (add-hook 'json-mode-hook #'dw/set-js-indentation))


  (use-package apheleia
    :config
    (apheleia-global-mode +1))

  (use-package prettier-js
    ;; :hook ((js2-mode . prettier-js-mode)
    ;;        (typescript-mode . prettier-js-mode))
    :config
    (setq prettier-js-show-errors nil))

#+end_src

#+RESULTS:
: t

*** C/C++
#+begin_src emacs-lisp :tangle no
  (use-package ccls
    :mode ("\\.c\\'" "\\.cpp\\'" "\\.h\\'" "\\.hpp\\'" "\\.cu\\'")
    :hook ((c-mode c++-mode objc-mode cuda-mode) .
           (lambda () (require 'ccls) (lsp))))
#+end_src
#+RESULTS:
| lambda | nil | (require 'ccls) | (lsp) |
*** Cmake
#+begin_src emacs-lisp
  (use-package cmake-mode
    :mode "CMakeLists\\.txt\\'"
    :mode "\\.cmake\\'")
#+end_src

#+RESULTS:
: ((\.cmake\' . cmake-mode) (CMakeLists\.txt\' . cmake-mode) (\.editorconfig\' . editorconfig-conf-mode) (.qmd\.Rmd\' . poly-quarto-mode) (\.qmd\' . poly-quarto-mode) (\.md\' . poly-markdown-mode) (README\.md\' . gfm-mode) (\.yml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) ((\.\(html?\|ejs\|tsx\|jsx\)\' . web-mode) (\.ipynb\' . ein:ipynb-mode) (\.py\' . python-mode) (\.jsx?\' . js2-mode) (\.ts\' . typescript-mode) (\.tsx?\' . typescript-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.h\' . c++-mode) (\.cpp\' . c++-mode) (/git-rebase-todo\' . git-rebase-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

*** python
**** python mode

#+begin_src emacs-lisp
(use-package python-mode
    :mode "\\.py\\'"
    :init
    (setq python-shell-interpreter "/home/leon/mambaforge/bin/python3")

    :custom
    (dap-python-executable "/home/leon/mambaforge/bin/python3")
    (dap-python-debugger 'debugpy)
    :config
    (require 'dap-python))
#+end_src

#+RESULTS:
**** Productivity

#+begin_src emacs-lisp
  ;; (use-package py-isort
  ;;   :hook (python-mode . py-isort-before-save)
  ;;   :config
  ;;   (setq py-isort-options '("--lines=88" "-m=3" "-tc" "-fgw=0" "-ca"))) ;

  (defun call-isort ()
    "Call the isort command on the current buffer"
    (interactive)
    (shell-command-on-region (point-min)
                             (point-max)
                             "isort -"
                             (current-buffer)
                             t))

  (add-hook 'python-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'call-isort nil t)))

    ;; (use-package py-autoflake
    ;;       :hook (python-mode . py-autoflake-enable-on-save)
    ;;       :config
    ;;       (setq py-autoflake-options '("--expand-star-imports")))

    ;; (use-package py-docformatter
    ;;       :hook (python-mode . py-docformatter-enable-on-save)
    ;;       :config
    ;;       (setq py-docformatter-options '("--wrap-summaries=88" "--pre-summary-newline")))

    (use-package python-docstring
      :hook (python-mode . python-docstring-mode))

    (use-package blacken
      :hook (python-mode . blacken-mode)
        :config (setq blacken-line-length '88))

    (use-package python-black
      :straight t
      :hook (python-mode . python-black-on-save-mode-enable-dwim))

    (defun leon/eglot-format-buffer ()
      "Format current buffer according to LSP server."
      (interactive)
      (if (and (eq major-mode 'python-mode) (executable-find "black"))
          (python-black-buffer)
        (eglot--format-buffer)))

#+end_src

#+RESULTS:
: leon/eglot-format-buffer

**** virtual envs
#+begin_src emacs-lisp
  (use-package
    conda
    :config (conda-env-autoactivate-mode t)
    ;; TODO: we need to activate the envs for python files but not for, e.g., jupyter repl buffer
    :hook (python-mode . (lambda () (conda-env-activate-for-buffer))))

  (use-package pyvenv
    :ensure t
    :after conda
    :hook (python-mode . pyvenv-mode)
    :init
    (setenv "WORKON_HOME" "/home/leon/mambaforge/envs/")
    :config
    (setq pyvenv-workon "/home/leon/mambaforge/envs/"))


#+end_src

#+RESULTS:
| (lambda nil (conda-env-activate-for-buffer)) | rainbow-mode | tree-sitter-hl-mode | tree-sitter-mode | pyvenv-mode | (closure (bootstrap-version t) nil (conda-env-activate-for-buffer)) | eglot-ensure | evil-collection-python-set-evil-shift-width | origami-mode | ws-butler-mode | doom-modeline-env-setup-python |

**** Ein
#+begin_src emacs-lisp

  (use-package ein
    :config
    (setq ein:output-area-inlined-images t)
    (setq ein:slice-image t)
    (setq ein:completion-backend 'ein:use-company-backend)
    (evil-define-key 'normal ein:notebook-multilang-mode-map
      (kbd "RET") 'ein:worksheet-execute-cell-and-goto-next)
    (evil-define-key 'normal ein:notebook-mode-map
      (kbd "RET") 'ein:worksheet-execute-cell-and-goto-next)
    (add-hook 'ein:notebook-mode-hook #'evil-normal-state)

    (defun save-and-keep-state (&rest args)
      (let ((current-state evil-state)) ; capture current state
        (apply args)                    ; apply original function
        (evil-change-state current-state))) ; return to captured state

    (advice-add 'ein:notebook-save-notebook-command :around #'save-and-keep-state)

    (add-hook 'ein:notebook-mode-hook 'undo-tree-mode)

    (defun custom:notebook-mode-hook ()
      (evil-set-initial-state 'ein:notebook-multilang-mode 'insert))
    (add-hook 'ein:notebook-mode-hook 'custom:notebook-mode-hook))

  ;; (use-package company
  ;;   :ensure t
  ;;   :config
  ;;   (setq company-idle-delay .2)
  ;;   (setq company-minimum-prefix-length 2)
  ;;   (add-hook 'ein:notebook-multilang-mode-hook 'company-mode))  ;; enable company-mode only in ein

  ;; (use-package company-prescient
  ;;   :after company
  ;;   :config
  ;;   (company-prescient-mode))

  ;; (use-package company-box
  ;;   :after company
  ;;   :hook (company-mode . company-box-mode))

#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

*** Emacs Lisp

#+begin_src emacs-lisp

  (add-hook 'emacs-lisp-mode-hook #'flycheck-mode)

  (use-package helpful
    :ensure t
    :bind (("C-h f" . helpful-callable)
           ("C-h v" . helpful-variable)
           ("C-h k" . helpful-key))
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable))

  (dw/leader-key-def
    "e"   '(:ignore t :which-key "eval")
    "eb"  '(eval-buffer :which-key "eval buffer"))

  (dw/leader-key-def
    :keymaps '(visual)
    "er" '(eval-region :which-key "eval region"))

#+end_src

#+RESULTS:
: helpful-key

*** HTML

#+begin_src emacs-lisp

  (use-package web-mode
    :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
    :config
    (setq-default web-mode-code-indent-offset 2)
    (setq-default web-mode-markup-indent-offset 2)
    (setq-default web-mode-attribute-indent-offset 2))

  ;; 1. Start the server with `httpd-start'
  ;; 2. Use `impatient-mode' on any buffer
  (use-package impatient-mode
    :after web-mode)

  (use-package skewer-mode
    :after web-mode)

#+end_src

#+RESULTS:

** Compilation
Set up the =compile= package and ensure that compilation output automatically scrolls.

#+begin_src emacs-lisp
  (use-package compile
    :custom
    (compilation-scroll-output t))

  (defun auto-recompile-buffer ()
    (interactive)
    (if (member #'recompile after-save-hook)
        (remove-hook 'after-save-hook #'recompile t)
      (add-hook 'after-save-hook #'recompile nil t)))

#+end_src

#+RESULTS:
: auto-recompile-buffer

** Productivity
*** agressive indent
#+begin_src emacs-lisp
  (use-package aggressive-indent
    :commands (aggressive-indent-mode))
#+end_src
#+RESULTS:
*** Syntax checking with Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (flycheck-define-checker python-ruff
      "A Python syntax and style checker using the ruff utility.
      To override the path to the ruff executable, set
      `flycheck-python-ruff-executable'.
      See URL `http://pypi.python.org/pypi/ruff'."
      :command ("ruff"
                "--format=text"
                (eval (when buffer-file-name
                        (concat "--stdin-filename=" buffer-file-name)))
                "-")
      :standard-input t
      :error-filter (lambda (errors)
                      (let ((errors (flycheck-sanitize-errors errors)))
                        (seq-map #'flycheck-flake8-fix-error-level errors)))
      :error-patterns
      ((warning line-start
                (file-name) ":" line ":" (optional column ":") " "
                (id (one-or-more (any alpha)) (one-or-more digit)) " "
                (message (one-or-more not-newline))
                line-end))
      :modes python-mode)
    (add-to-list 'flycheck-checkers 'python-ruff)
    :init (global-flycheck-mode))

  (use-package flycheck-pycheckers
  :ensure t
  :after flycheck
  :config
  (with-eval-after-load 'flycheck
    (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup)))

#+end_src

#+RESULTS:
: t

*** tree-sitter
#+begin_src emacs-lisp
  ;; code parsing
  (use-package tree-sitter
    :hook (python-mode . tree-sitter-mode)
    :hook (python-mode . tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :after tree-sitter)

#+end_src

#+RESULTS:
*** treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum-face
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :bind
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

#+end_src

#+RESULTS:

*** YAML
#+begin_src emacs-lisp
  (use-package
    yaml-mode
    :mode "\\.yml\\'"
    ;; :hook (yaml-mode . highlight-indent-guides-mode)
    :config (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))
#+end_src

#+RESULTS:
: ((\.yml\' . yaml-mode) (\.\(e?ya?\|ra\)ml\' . yaml-mode) (.qmd\.Rmd\' . poly-quarto-mode) (\.qmd\' . poly-quarto-mode) (\.md\' . poly-markdown-mode) (README\.md\' . gfm-mode) ((\.\(html?\|ejs\|tsx\|jsx\)\' . web-mode) (\.ipynb\' . ein:ipynb-mode) (\.py\' . python-mode) (\.jsx?\' . js2-mode) (\.ts\' . typescript-mode) (\.tsx?\' . typescript-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.h\' . c++-mode) (\.cpp\' . c++-mode) (/git-rebase-todo\' . git-rebase-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

*** Snippets
#+begin_src emacs-lisp
  (use-package yasnippet-snippets
    :defer t
    :after yasnippet)

  (use-package yasnippet
    :defer t
    :hook (prog-mode . yas-minor-mode)
    :config
    (setq yas-snippet-dirs `(,(concat (expand-file-name user-emacs-directory) "snippets")
                             yasnippet-snippets-dir))
    (setq yas-triggers-in-field t)
    (yas-reload-all))


#+end_src

#+RESULTS:
| rainbow-delimiters-mode | smartparens-mode | yas-minor-mode | ws-butler-mode | git-gutter-mode | (closure ((mode . prog-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 1)) |

*** Smart Parens

#+begin_src emacs-lisp

  (use-package smartparens
    :hook (prog-mode . smartparens-mode))

#+end_src

#+RESULTS:
| smartparens-mode | yas-minor-mode | rainbow-delimiters-mode |

*** Rainbow Delimiters

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

#+RESULTS:
| smartparens-mode | yas-minor-mode | rainbow-delimiters-mode |

*** Rainbow Mode

Sets the background of HTML color strings in buffers to be the color mentioned.

#+begin_src emacs-lisp

  (use-package rainbow-mode
    :defer t
    :hook (org-mode
           emacs-lisp-mode
           web-mode
           typescript-mode
           python-mode
           js2-mode))

#+end_src

#+RESULTS:
| rainbow-mode |

*** writing
#+begin_src emacs-lisp :tangle no
  (use-package writegood-mode
    :hook (jinx-mode . writegood-mode))

  (use-package jinx
    :bind ("C-c DEL" . jinx-correct)
    :hook ((markdown-mode
            nroff-mode org-mode
            mail-mode
            git-commit-mode
            org-mode)
           . jinx-mode)
    :init
    (global-jinx-mode 1)
    )
#+end_src
* Applications
** Launching apps
#+begin_src emacs-lisp
  (use-package app-launcher
      :straight '(app-launcher :host github :repo "SebastienWae/app-launcher"))
#+end_src

** Mail

My mail configuration is stored in [[file:Mail.org][Mail.org]].  We merely require it here to have it loaded in the main Emacs configuration.

#+begin_src emacs-lisp :tangle no

  ;; Only fetch mail on zerocool
  (setq dw/mail-enabled (member system-name '("Persephone")))
  (setq dw/mu4e-inbox-query nil)
  (when dw/mail-enabled
    (require 'dw-mail))

#+end_src

#+RESULTS:

*** mu4e
#+begin_src emacs-lisp :tangle no

  (delete 'mu4e evil-collection-mode-list)
  (delete 'mu4e-conversation evil-collection-mode-list)

  (use-package mu4e
    :straight nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    :defer 20 ; Wait until 20 seconds after startup
    :config
    (require 'org-mu4e)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/Mail")

    ;; Use Ivy for mu4e completions (maildir folders, etc)
    (setq mu4e-completing-read-function #'ivy-completing-read)

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; (setq mu4e-contexts (
    ;;                      (list
    ;;                       (make-mu4e-contexts
    ;;                        :name "Personal"
    ;;                        :match-func
    ;;                        (lambda (msg)
    ;;                          (when msg
    ;;                            (string-prefix-p "/Gmail" (mu4e-message-field msg :maildir))))
    ;;                        :vars '((user-mail-address . "mahrachalexandre@gmail.com")
    ;;                                (user-full-name    . "Alexandre Mahrach")
    ;;                                (mu4e-compose-signature . "- Leon")
    ;;                                (smtpmail-smtp-server  "smtp.gmail.com")
    ;;                                (smtpmail-smtp-service 465)
    ;;                                (smtpmail-stream-type  'ssl))
    ;;                        )
    ;;                       )
    ;;                      )
    ;;       )

    (setq mu4e-drafts-folder "/[Gmail]/Drafts")
    (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
    (setq mu4e-refile-folder "/[Gmail]/All Mail")
    (setq mu4e-trash-folder  "/[Gmail]/Trash")

    ;; Display options
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses 't)

    ;; Composing mail
    (setq mu4e-compose-dont-reply-to-self t)

    ;; Use mu4e for sending e-mail
    (setq mail-user-agent 'mu4e-user-agent
          message-send-mail-function 'smtpmail-send-it
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 465
          smtpmail-stream-type  'ssl)

    (setq mu4e-maildir-shortcuts
          '((:maildir "/Inbox"    :key ?i)
            (:maildir "/[Gmail]/Sent Mail" :key ?s)
            (:maildir "/[Gmail]/Trash"     :key ?t)
            (:maildir "/[Gmail]/Drafts"    :key ?d)
            (:maildir "/[Gmail]/All Mail"  :key ?a)))

    (setq mu4e-inbox-query
          "maildir:/Mail/Inbox AND flag:unread")

    )
#+end_src

#+RESULTS:
: t
Use [[https://github.com/iqbalansari/mu4e-alert][mu4e-alert]] to show notifications when e-mail comes in:

#+begin_src emacs-lisp

  (use-package mu4e-alert

    :after mu4e
    :config
    ;; Show unread emails from all inboxes
    (setq mu4e-alert-interesting-mail-query mu4e-inbox-query)

    ;; Show notifications for mails already notified
    (setq mu4e-alert-notify-repeated-mails nil)

    (mu4e-alert-enable-notifications))

#+end_src

#+RESULTS:
: t

*** Enhancing emails with Org Mode
**** HTML mail
#+begin_src emacs-lisp :tangle no
  (use-package org-mime
    :after org
    :config
    (setq org-mime-export-options '(:section-numbers nil
                                                     :with-author nil
                                                     :with-toc nil))

    ;; Automatically converting mail to HTML
    ;; (add-hook 'message-send-hook 'org-mime-htmlize)
    ;; be reminded when you didn’t use HTML
    ;; (add-hook 'message-send-hook 'org-mime-confirm-when-no-multipart)
    )
#+end_src

Now you can use M-x org-mime-htmlize inside of a mail composition buffer to convert it to HTML!
*** org-msg
#+begin_src emacs-lisp :tangle no
  (use-package org-msg

    :after mu4e
    :config
    (setq mail-user-agent 'mu4e-user-agent)
    (setq org-msg-options "html-postamble:nil H:5 num:nil ^:{} toc:nil author:nil email:nil \\n:t"
          org-msg-startup "hidestars indent inlineimages"
          org-msg-greeting-fmt "\nHi%s,\n\n"
          org-msg-recipient-names '(("mahrachalexandre@gmail.com" . "Leon"))
          org-msg-greeting-name-limit 3
          org-msg-default-alternatives '((new		. (text html))
                                         (reply-to-html	. (text html))
                                         (reply-to-text	. (text)))
          org-msg-convert-citation t
          org-msg-signature "

   Sincerely,

   ,#+begin_signature
   --
   ,*Leon*
   /One Emacs to rule them all/
   ,#+end_signature")
    (org-msg-mode)
    )
#+end_src

#+RESULTS:
: t

** Web
#+begin_src emacs-lisp :tangle no

  (use-package all-the-icons)

  (use-package webkit
    :straight (:type git
                     :host github
                     :repo "akirakyle/emacs-webkit"
                     :files (:defaults "*.js" "*.css" "*.so")
                     :pre-build ("make"))
    ;; :bind ("s-b" 'webkit)
    :init
    (setq webkit-own-window nil)

    :config
    ;; If you don't care so much about privacy and want to give your data to google
    (setq webkit-search-prefix "https://google.com/search?q=")

    ;; Specify a different set of characters use in the link hints
    ;; For example the following are more convienent if you use dvorak
    (setq webkit-ace-chars "aoeuidhtns")

    ;; If you want history saved in a different place or
    ;; Set to `nil' to if you don't want history saved to file (will stay in memory)
    (setq webkit-history-file "~/.emacs.d/webkit/history")

    ;; If you want cookies saved in a different place or
    ;; Set to `nil' to if you don't want cookies saved
    (setq webkit-cookie-file "~/.emacs.d/webkit/cookies")

    ;; See the above explination in the Background section
    ;; This must be set before webkit.el is loaded so certain hooks aren't installed
    (setq webkit-own-window nil)

    ;; Set webkit as the default browse-url browser
    (setq browse-url-browser-function 'webkit-browse-url)

    ;; Force webkit to always open a new session instead of reusing a current one
    (setq webkit-browse-url-force-new nil)

    ;; Globally disable javascript
    (add-hook 'webkit-new-hook #'webkit-enable-javascript)

    ;; Override the "loading:" mode line indicator with an icon from `all-the-icons.el'
    ;; You could also use a unicode icon like ↺
    (defun webkit--display-progress (progress)
      (setq webkit--progress-formatted
            (if (equal progress 100.0)
                ""
              (format "%s%.0f%%  " (all-the-icons-faicon "spinner") progress)))
      (force-mode-line-update))

    ;; Set action to be taken on a download request. Predefined actions are
    ;; `webkit-download-default', `webkit-download-save', and `webkit-download-open'
    ;; where the save function saves to the download directory, the open function
    ;; opens in a temp buffer and the default function interactively prompts.
    (setq webkit-download-action-alist '(("\\.pdf\\'" . webkit-download-open)
                                         ("\\.png\\'" . webkit-download-save)
                                         (".*" . webkit-download-default)))

    ;; Globally use a proxy
    ;; (add-hook 'webkit-new-hook (lambda () (webkit-set-proxy "socks://localhost:8000")))

    ;; Globally use the simple dark mode
    (setq webkit-dark-mode t))
#+end_src

#+RESULTS:
: t

** eshell
*** Configuration

#+begin_src emacs-lisp

  (defun read-file (file-path)
    (with-temp-buffer
      (insert-file-contents file-path)
      (buffer-string)))

  (defun dw/get-current-package-version ()
    (interactive)
    (let ((package-json-file (concat (eshell/pwd) "/package.json")))
      (when (file-exists-p package-json-file)
        (let* ((package-json-contents (read-file package-json-file))
               (package-json (ignore-errors (json-parse-string package-json-contents))))
          (when package-json
            (ignore-errors (gethash "version" package-json)))))))

  (defun dw/map-line-to-status-char (line)
    (cond ((string-match "^?\\? " line) "?")))

  (defun dw/get-git-status-prompt ()
    (let ((status-lines (cdr (process-lines "git" "status" "--porcelain" "-b"))))
      (seq-uniq (seq-filter 'identity (mapcar 'dw/map-line-to-status-char status-lines)))))

  (defun dw/get-prompt-path ()
    (let* ((current-path (eshell/pwd))
           (git-output (shell-command-to-string "git rev-parse --show-toplevel"))
           (has-path (not (string-match "^fatal" git-output))))
      (if (not has-path)
          (abbreviate-file-name current-path)
        (string-remove-prefix (file-name-directory git-output) current-path))))

  ;; This prompt function mostly replicates my custom zsh prompt setup
  ;; that is powered by github.com/denysdovhan/spaceship-prompt.
  (defun dw/eshell-prompt ()
    (let ((current-branch (magit-get-current-branch))
          (package-version (dw/get-current-package-version)))
      (concat
       "\n"
       (propertize (system-name) 'face `(:foreground "#62aeed"))
       (propertize " ॐ " 'face `(:foreground "white"))
       (propertize (dw/get-prompt-path) 'face `(:foreground "#82cfd3"))
       (when current-branch
         (concat
          (propertize " • " 'face `(:foreground "white"))
          (propertize (concat " " current-branch) 'face `(:foreground "#c475f0"))))
       (when package-version
         (concat
          (propertize " @ " 'face `(:foreground "white"))
          (propertize package-version 'face `(:foreground "#e8a206"))))
       (propertize " • " 'face `(:foreground "white"))
       (propertize (format-time-string "%I:%M:%S %p") 'face `(:foreground "#5a5b7f"))
       (if (= (user-uid) 0)
           (propertize "\n#" 'face `(:foreground "red2"))
         (propertize "\nλ" 'face `(:foreground "#aece4a")))
       (propertize " " 'face `(:foreground "white")))))

  (add-hook 'eshell-banner-load-hook
            (lambda ()
              (setq eshell-banner-message
                    (concat "\n" (propertize " " 'display (create-image "~/.dotfiles/.emacs.d/images/flux_banner.png" 'png nil :scale 0.2 :align-to "center")) "\n\n"))))

  (defun dw/eshell-configure ()
    ;;    (require 'evil-collection-eshell)
    ;;  (evil-collection-eshell-setup)

    (use-package xterm-color)

    (push 'eshell-tramp eshell-modules-list)
    (push 'xterm-color-filter eshell-preoutput-filter-functions)
    (delq 'eshell-handle-ansi-color eshell-output-filter-functions)

    ;; Save command history when commands are entered
    (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

    (add-hook 'eshell-before-prompt-hook
              (lambda ()
                (setq xterm-color-preserve-properties t)))

    ;; Truncate buffer for performance
    (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

    ;; We want to use xterm-256color when running interactive commands
    ;; in eshell but not during other times when we might be launching
    ;; a shell command to gather its output.
    (add-hook 'eshell-pre-command-hook
              (lambda () (setenv "TERM" "xterm-256color")))
    (add-hook 'eshell-post-command-hook
              (lambda () (setenv "TERM" "dumb")))

    ;; Use completion-at-point to provide completions in eshell
    (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)

    ;; Initialize the shell history
    (eshell-hist-initialize)

    ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'consult-history)
    ;; (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
    ;; (evil-normalize-keymaps)

    (setenv "PAGER" "cat")

    (setq eshell-prompt-function      'dw/eshell-prompt
          eshell-prompt-regexp        "^λ "
          eshell-history-size         10000
          eshell-buffer-maximum-lines 10000
          eshell-hist-ignoredups t
          eshell-highlight-prompt t
          eshell-scroll-to-bottom-on-input t
          eshell-prefer-lisp-functions nil))

  (use-package eshell
    :hook (eshell-first-time-mode . dw/eshell-configure)
    :bind ("C-r" . 'consult-history)
    :init
    (setq eshell-directory-name "~/.dotfiles/.emacs.d/eshell/"
          eshell-aliases-file (expand-file-name "~/.dotfiles/.emacs.d/eshell/alias")))

  (use-package eshell-z
    :disabled ;; Using consult-dir for this now
    :hook ((eshell-mode . (lambda () (require 'eshell-z)))
           (eshell-z-change-dir .  (lambda () (eshell/pushd (eshell/pwd))))))

  ;; (use-package exec-path-from-shell
  ;;   :init
  ;;   (setq exec-path-from-shell-check-startup-files nil)
  ;;   :config
  ;;   (when (memq window-system '(mac ns x))
  ;;     (exec-path-from-shell-initialize)))

  ;; (dw/leader-key-def
  ;;   "SPC" 'eshell)

#+end_src

#+RESULTS:
: t

*** Shell Commands

Custom eshell commands will go here.

*** Visual Commands

#+begin_src emacs-lisp

  (with-eval-after-load 'esh-opt
    (setq eshell-destroy-buffer-when-process-dies t)
    (setq eshell-visual-commands '("htop" "zsh" "vim")))

#+end_src

#+RESULTS:
| htop | zsh | vim |

*** Better Colors

#+begin_src emacs-lisp

  (use-package eterm-256color
    :ensure t
    :hook (term-mode . eterm-256color-mode))

#+end_src

#+RESULTS:
| eterm-256color-mode | evil-collection-term-escape-stay | evil-collection-term-sync-state-and-mode |

If emacs keep asking for compilation every time ones open a terminal do:
#+begin_src bash
tic -x -o ~/.terminfo ~/.emacs.d/straight/build/eterm-256color.ti
#+end_src

*** Fish Completion

This enhances eshell's completions with those that Fish is capable of and also falls back to any additional completions that are configured for Bash on the system.  The primary benefit here (for me) is getting completion for commits and branches in =git= commands.

#+begin_src emacs-lisp

  (use-package fish-completion
    :disabled
    :hook (eshell-mode . fish-completion-mode))

#+end_src

#+RESULTS:

*** Command Highlighting

#+begin_src emacs-lisp

  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

#+end_src

#+RESULTS:

*** History Autocompletion

#+begin_src emacs-lisp

  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    :config
    (setq esh-autosuggest-delay 0.5)
    (set-face-foreground 'company-preview-common "#4b5668")
    (set-face-background 'company-preview nil))

#+end_src

#+RESULTS:
| esh-autosuggest-mode | tramp-eshell-directory-change | (lambda nil (display-line-numbers-mode 0)) |

*** Toggling Eshell

=eshell-toggle= allows me to toggle an Eshell window below the current buffer for the path (or project path) of the buffer.

#+begin_src emacs-lisp

  (use-package eshell-toggle
    :disabled
    :after eshell
    :bind ("C-M-'" . eshell-toggle)
    :custom
    (eshell-toggle-size-fraction 3)
    (eshell-toggle-use-projectile-root t)
    (eshell-toggle-run-command nil))

#+end_src

#+RESULTS:

** vterm

=vterm= enables the use of fully-fledged terminal applications within Emacs so that I don't need an external terminal emulator.

#+begin_src emacs-lisp

  (use-package vterm
    :commands vterm
    :config
    (setq vterm-max-scrollback 10000)
    )

#+end_src

#+RESULTS:

** eat
#+begin_src emacs-lisp
  (use-package eat
    :ensure t
    :config
    (eat-eshell-mode)
    (setq eshell-visual-commands '()))
#+end_src

#+RESULTS:
: t

** quarto
#+begin_src emacs-lisp

  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode))
    :init (setq markdown-command "/usr/local/bin/multimarkdown"))

  (use-package polymode)
  (use-package poly-markdown)
  (use-package request)

  (use-package quarto-mode
    :mode ((".qmd\\.Rmd\\'" . poly-quarto-mode))
    :config
    (require 'polymode)
    (require 'poly-markdown)
    (require 'request))
#+end_src

#+RESULTS:
: ((.qmd\.Rmd\' . poly-quarto-mode) (\.qmd\' . poly-quarto-mode) (\.md\' . poly-markdown-mode) (README\.md\' . gfm-mode) ((\.\(html?\|ejs\|tsx\|jsx\)\' . web-mode) (\.ipynb\' . ein:ipynb-mode) (\.py\' . python-mode) (\.jsx?\' . js2-mode) (\.ts\' . typescript-mode) (\.\(?:md\|markdown\|mkd\|mdown\|mkdn\|mdwn\)\' . markdown-mode) (\.h\' . c++-mode) (\.cpp\' . c++-mode) (/git-rebase-todo\' . git-rebase-mode) (\.odc\' . archive-mode) (\.odf\' . archive-mode) (\.odi\' . archive-mode) (\.otp\' . archive-mode) (\.odp\' . archive-mode) (\.otg\' . archive-mode) (\.odg\' . archive-mode) (\.ots\' . archive-mode) (\.ods\' . archive-mode) (\.odm\' . archive-mode) (\.ott\' . archive-mode) (\.odt\' . archive-mode) (\.gpg\(~\|\.~[0-9]+~\)?\' nil epa-file) (\.elc\' . elisp-byte-code-mode) (\.zst\' nil jka-compr) (\.dz\' nil jka-compr) (\.xz\' nil jka-compr) (\.lzma\' nil jka-compr) (\.lz\' nil jka-compr) (\.g?z\' nil jka-compr) (\.bz2\' nil jka-compr) (\.Z\' nil jka-compr) (\.vr[hi]?\' . vera-mode) (\(?:\.\(?:rbw?\|ru\|rake\|thor\|jbuilder\|rabl\|gemspec\|podspec\)\|/\(?:Gem\|Rake\|Cap\|Thor\|Puppet\|Berks\|Brew\|Vagrant\|Guard\|Pod\)file\)\' . ruby-mode) (\.re?st\' . rst-mode) (\.py[iw]?\' . python-mode) (\.m\' . octave-maybe-mode) (\.less\' . less-css-mode) (\.scss\' . scss-mode) (\.awk\' . awk-mode) (\.\(u?lpc\|pike\|pmod\(\.in\)?\)\' . pike-mode) (\.idl\' . idl-mode) (\.java\' . java-mode) (\.m\' . objc-mode) (\.ii\' . c++-mode) (\.i\' . c-mode) (\.lex\' . c-mode) (\.y\(acc\)?\' . c-mode) (\.h\' . c-or-c++-mode) (\.c\' . c-mode) (\.\(CC?\|HH?\)\' . c++-mode) (\.[ch]\(pp\|xx\|\+\+\)\' . c++-mode) (\.\(cc\|hh\)\' . c++-mode) (\.\(bat\|cmd\)\' . bat-mode) (\.[sx]?html?\(\.[a-zA-Z_]+\)?\' . mhtml-mode) (\.svgz?\' . image-mode) (\.svgz?\' . xml-mode) (\.x[bp]m\' . image-mode) (\.x[bp]m\' . c-mode) (\.p[bpgn]m\' . image-mode) (\.tiff?\' . image-mode) (\.gif\' . image-mode) (\.png\' . image-mode) (\.jpe?g\' . image-mode) (\.te?xt\' . text-mode) (\.[tT]e[xX]\' . tex-mode) (\.ins\' . tex-mode) (\.ltx\' . latex-mode) (\.dtx\' . doctex-mode) (\.org\' . org-mode) (\.dir-locals\(?:-2\)?\.el\' . lisp-data-mode) (eww-bookmarks\' . lisp-data-mode) (tramp\' . lisp-data-mode) (/archive-contents\' . lisp-data-mode) (places\' . lisp-data-mode) (\.emacs-places\' . lisp-data-mode) (\.el\' . emacs-lisp-mode) (Project\.ede\' . emacs-lisp-mode) (\.\(scm\|stk\|ss\|sch\)\' . scheme-mode) (\.l\' . lisp-mode) (\.li?sp\' . lisp-mode) (\.[fF]\' . fortran-mode) (\.for\' . fortran-mode) (\.p\' . pascal-mode) (\.pas\' . pascal-mode) (\.\(dpr\|DPR\)\' . delphi-mode) (\.\([pP]\([Llm]\|erl\|od\)\|al\)\' . perl-mode) (Imakefile\' . makefile-imake-mode) (Makeppfile\(?:\.mk\)?\' . makefile-makepp-mode) (\.makepp\' . makefile-makepp-mode) (\.mk\' . makefile-gmake-mode) (\.make\' . makefile-gmake-mode) ([Mm]akefile\' . makefile-gmake-mode) (\.am\' . makefile-automake-mode) (\.texinfo\' . texinfo-mode) (\.te?xi\' . texinfo-mode) (\.[sS]\' . asm-mode) (\.asm\' . asm-mode) (\.css\' . css-mode) (\.mixal\' . mixal-mode) (\.gcov\' . compilation-mode) (/\.[a-z0-9-]*gdbinit . gdb-script-mode) (-gdb\.gdb . gdb-script-mode) ([cC]hange\.?[lL]og?\' . change-log-mode) ([cC]hange[lL]og[-.][0-9]+\' . change-log-mode) (\$CHANGE_LOG\$\.TXT . change-log-mode) (\.scm\.[0-9]*\' . scheme-mode) (\.[ckz]?sh\'\|\.shar\'\|/\.z?profile\' . sh-mode) (\.bash\' . sh-mode) (/PKGBUILD\' . sh-mode) (\(/\|\`\)\.\(bash_\(profile\|history\|log\(in\|out\)\)\|z?log\(in\|out\)\)\' . sh-mode) (\(/\|\`\)\.\(shrc\|zshrc\|m?kshrc\|bashrc\|t?cshrc\|esrc\)\' . sh-mode) (\(/\|\`\)\.\([kz]shenv\|xinitrc\|startxrc\|xsession\)\' . sh-mode) (\.m?spec\' . sh-mode) (\.m[mes]\' . nroff-mode) (\.man\' . nroff-mode) (\.sty\' . latex-mode) (\.cl[so]\' . latex-mode) (\.bbl\' . latex-mode) (\.bib\' . bibtex-mode) (\.bst\' . bibtex-style-mode) (\.sql\' . sql-mode) (\(acinclude\|aclocal\|acsite\)\.m4\' . autoconf-mode) (\.m[4c]\' . m4-mode) (\.mf\' . metafont-mode) (\.mp\' . metapost-mode) (\.vhdl?\' . vhdl-mode) (\.article\' . text-mode) (\.letter\' . text-mode) (\.i?tcl\' . tcl-mode) (\.exp\' . tcl-mode) (\.itk\' . tcl-mode) (\.icn\' . icon-mode) (\.sim\' . simula-mode) (\.mss\' . scribe-mode) (\.f9[05]\' . f90-mode) (\.f0[38]\' . f90-mode) (\.indent\.pro\' . fundamental-mode) (\.\(pro\|PRO\)\' . idlwave-mode) (\.srt\' . srecode-template-mode) (\.prolog\' . prolog-mode) (\.tar\' . tar-mode) (\.\(arc\|zip\|lzh\|lha\|zoo\|[jew]ar\|xpi\|rar\|cbr\|7z\|squashfs\|ARC\|ZIP\|LZH\|LHA\|ZOO\|[JEW]AR\|XPI\|RAR\|CBR\|7Z\|SQUASHFS\)\' . archive-mode) (\.oxt\' . archive-mode) (\.\(deb\|[oi]pk\)\' . archive-mode) (\`/tmp/Re . text-mode) (/Message[0-9]*\' . text-mode) (\`/tmp/fol/ . text-mode) (\.oak\' . scheme-mode) (\.sgml?\' . sgml-mode) (\.x[ms]l\' . xml-mode) (\.dbk\' . xml-mode) (\.dtd\' . sgml-mode) (\.ds\(ss\)?l\' . dsssl-mode) (\.js[mx]?\' . javascript-mode) (\.har\' . javascript-mode) (\.json\' . javascript-mode) (\.[ds]?va?h?\' . verilog-mode) (\.by\' . bovine-grammar-mode) (\.wy\' . wisent-grammar-mode) ([:/\]\..*\(emacs\|gnus\|viper\)\' . emacs-lisp-mode) (\`\..*emacs\' . emacs-lisp-mode) ([:/]_emacs\' . emacs-lisp-mode) (/crontab\.X*[0-9]+\' . shell-script-mode) (\.ml\' . lisp-mode) (\.ld[si]?\' . ld-script-mode) (ld\.?script\' . ld-script-mode) (\.xs\' . c-mode) (\.x[abdsru]?[cnw]?\' . ld-script-mode) (\.zone\' . dns-mode) (\.soa\' . dns-mode) (\.asd\' . lisp-mode) (\.\(asn\|mib\|smi\)\' . snmp-mode) (\.\(as\|mi\|sm\)2\' . snmpv2-mode) (\.\(diffs?\|patch\|rej\)\' . diff-mode) (\.\(dif\|pat\)\' . diff-mode) (\.[eE]?[pP][sS]\' . ps-mode) (\.\(?:PDF\|DVI\|OD[FGPST]\|DOCX\|XLSX?\|PPTX?\|pdf\|djvu\|dvi\|od[fgpst]\|docx\|xlsx?\|pptx?\)\' . doc-view-mode-maybe) (configure\.\(ac\|in\)\' . autoconf-mode) (\.s\(v\|iv\|ieve\)\' . sieve-mode) (BROWSE\' . ebrowse-tree-mode) (\.ebrowse\' . ebrowse-tree-mode) (#\*mail\* . mail-mode) (\.g\' . antlr-mode) (\.mod\' . m2-mode) (\.ses\' . ses-mode) (\.docbook\' . sgml-mode) (\.com\' . dcl-mode) (/config\.\(?:bat\|log\)\' . fundamental-mode) (/\.\(authinfo\|netrc\)\' . authinfo-mode) (\.\(?:[iI][nN][iI]\|[lL][sS][tT]\|[rR][eE][gG]\|[sS][yY][sS]\)\' . conf-mode) (\.la\' . conf-unix-mode) (\.ppd\' . conf-ppd-mode) (java.+\.conf\' . conf-javaprop-mode) (\.properties\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-javaprop-mode) (\.toml\' . conf-toml-mode) (\.desktop\' . conf-desktop-mode) (/\.redshift\.conf\' . conf-windows-mode) (\`/etc/\(?:DIR_COLORS\|ethers\|.?fstab\|.*hosts\|lesskey\|login\.?de\(?:fs\|vperm\)\|magic\|mtab\|pam\.d/.*\|permissions\(?:\.d/.+\)?\|protocols\|rpc\|services\)\' . conf-space-mode) (\`/etc/\(?:acpid?/.+\|aliases\(?:\.d/.+\)?\|default/.+\|group-?\|hosts\..+\|inittab\|ksysguarddrc\|opera6rc\|passwd-?\|shadow-?\|sysconfig/.+\)\' . conf-mode) ([cC]hange[lL]og[-.][-0-9a-z]+\' . change-log-mode) (/\.?\(?:gitconfig\|gnokiirc\|hgrc\|kde.*rc\|mime\.types\|wgetrc\)\' . conf-mode) (/\.\(?:asound\|enigma\|fetchmail\|gltron\|gtk\|hxplayer\|mairix\|mbsync\|msmtp\|net\|neverball\|nvidia-settings-\|offlineimap\|qt/.+\|realplayer\|reportbug\|rtorrent\.\|screen\|scummvm\|sversion\|sylpheed/.+\|xmp\)rc\' . conf-mode) (/\.\(?:gdbtkinit\|grip\|mpdconf\|notmuch-config\|orbital/.+txt\|rhosts\|tuxracer/options\)\' . conf-mode) (/\.?X\(?:default\|resource\|re\)s\> . conf-xdefaults-mode) (/X11.+app-defaults/\|\.ad\' . conf-xdefaults-mode) (/X11.+locale/.+/Compose\' . conf-colon-mode) (/X11.+locale/compose\.dir\' . conf-javaprop-mode) (\.~?[0-9]+\.[0-9][-.0-9]*~?\' nil t) (\.\(?:orig\|in\|[bB][aA][kK]\)\' nil t) ([/.]c\(?:on\)?f\(?:i?g\)?\(?:\.[a-zA-Z0-9._-]+\)?\' . conf-mode-maybe) (\.[1-9]\' . nroff-mode) (\.art\' . image-mode) (\.avs\' . image-mode) (\.bmp\' . image-mode) (\.cmyk\' . image-mode) (\.cmyka\' . image-mode) (\.crw\' . image-mode) (\.dcr\' . image-mode) (\.dcx\' . image-mode) (\.dng\' . image-mode) (\.dpx\' . image-mode) (\.fax\' . image-mode) (\.hrz\' . image-mode) (\.icb\' . image-mode) (\.icc\' . image-mode) (\.icm\' . image-mode) (\.ico\' . image-mode) (\.icon\' . image-mode) (\.jbg\' . image-mode) (\.jbig\' . image-mode) (\.jng\' . image-mode) (\.jnx\' . image-mode) (\.miff\' . image-mode) (\.mng\' . image-mode) (\.mvg\' . image-mode) (\.otb\' . image-mode) (\.p7\' . image-mode) (\.pcx\' . image-mode) (\.pdb\' . image-mode) (\.pfa\' . image-mode) (\.pfb\' . image-mode) (\.picon\' . image-mode) (\.pict\' . image-mode) (\.rgb\' . image-mode) (\.rgba\' . image-mode) (\.tga\' . image-mode) (\.wbmp\' . image-mode) (\.webp\' . image-mode) (\.wmf\' . image-mode) (\.wpg\' . image-mode) (\.xcf\' . image-mode) (\.xmp\' . image-mode) (\.xwd\' . image-mode) (\.yuv\' . image-mode) (\.tgz\' . tar-mode) (\.tbz2?\' . tar-mode) (\.txz\' . tar-mode) (\.tzst\' . tar-mode))

** Leetcode
#+begin_src emacs-lisp
  (use-package leetcode
    :config
    (setq leetcode-prefer-language "python3")
    (setq leetcode-prefer-sql "mysql")
    (setq leetcode-save-solutions t)
    (setq leetcode-directory "~/leetcode"))
#+end_src

** chatgpt

#+begin_src emacs-lisp
  (use-package gptel
    :straight '(gptel :host github
                      :repo "karthink/gptel"
                      :branch "master")

    :init
    (setq-default gptel-model "gpt-3.5-turbo"
                  gptel-playback t
                  gptel-api-key (lambda () (string-trim (shell-command-to-string "pass openai")))
                  gptel-default-mode 'org-mode))

#+end_src

#+RESULTS:

** copilot
#+begin_src emacs-lisp
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :after company
    :config (delq 'company-preview-if-just-one-frontend company-frontends)
    (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
    (define-key copilot-completion-map (kbd "TAB") 'copilot-accept-completion)
    :hook ((prog-mode . (lambda () (unless (equal (buffer-name) "*scratch*") copilot-mode)))))
#+end_src

#+RESULTS:
| (lambda nil (unless (equal (buffer-name) *scratch*) copilot-mode)) | rainbow-delimiters-mode | smartparens-mode | yas-minor-mode | ws-butler-mode | git-gutter-mode | (closure ((mode . prog-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 1)) |

* Move between buffers
#+begin_src emacs-lisp
  ;; move between buffer with "\C-xp"
  (global-set-key (kbd "C-x p") (lambda () (interactive) (other-window -1)))
#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (other-window -1) |

* Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp

  ;; Make gc pauses faster by decreasing the threshold.
  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

#+RESULTS:
: 2000000

* Auto tangle
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    "Automatically tangle our Emacs.org config file when we save it."
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.emacs.d/Emacs_cluster.org"))

      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | org-tempo-setup | (closure (bootstrap-version t) nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | rainbow-mode | org-appear-mode | evil-org-mode | org-superstar-mode | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-make-toc-mode | my/org-block-templates | my/org-fonts | dw/org-mode-setup | dw/org-mode-visual-fill | (closure ((mode . org-mode-hook) (--dolist-tail--) bootstrap-version t) nil (display-line-numbers-mode 0)) |
